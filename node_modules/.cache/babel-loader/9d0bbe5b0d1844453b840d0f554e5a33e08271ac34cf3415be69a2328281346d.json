{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport '../../constants/index.mjs';\nimport { componentSizes } from '../../constants/size.mjs';\nimport { datePickTypes } from '../../constants/date.mjs';\nvar isValidComponentSize = function isValidComponentSize(val) {\n  return [\"\"].concat(_toConsumableArray(componentSizes)).includes(val);\n};\nvar isValidDatePickType = function isValidDatePickType(val) {\n  return _toConsumableArray(datePickTypes).includes(val);\n};\nexport { isValidComponentSize, isValidDatePickType };","map":{"version":3,"names":["isValidComponentSize","val","concat","_toConsumableArray","componentSizes","includes","isValidDatePickType","datePickTypes"],"sources":["../../../../../packages/utils/vue/validator.ts"],"sourcesContent":["import { componentSizes, datePickTypes } from '@element-plus/constants'\nimport type { ComponentSize, DatePickType } from '@element-plus/constants'\n\nexport const isValidComponentSize = (val: string): val is ComponentSize | '' =>\n  ['', ...componentSizes].includes(val)\n\nexport const isValidDatePickType = (val: string): val is DatePickType =>\n  ([...datePickTypes] as string[]).includes(val)\n"],"mappings":";;;;;;;;;AACY,IAACA,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,GAAG;EAAA,OAAK,CAAC,EAAE,EAAAC,MAAA,CAAAC,kBAAA,CAAKC,cAAc,GAAEC,QAAQ,CAACJ,GAAG;AAAA;AACrE,IAACK,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIL,GAAG;EAAA,OAAKE,kBAAA,CAAII,aAAa,EAAEF,QAAQ,CAACJ,GAAG;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}