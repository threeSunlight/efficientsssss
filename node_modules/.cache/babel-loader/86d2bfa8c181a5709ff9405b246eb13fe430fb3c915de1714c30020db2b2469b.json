{"ast":null,"code":"var _collapseEmits;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { isNumber } from '../../../utils/types.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nvar emitChangeFn = function emitChangeFn(value) {\n  return _typeof(isNumber(value));\n};\nvar collapseProps = buildProps({\n  accordion: Boolean,\n  modelValue: {\n    type: definePropType([Array, String, Number]),\n    \"default\": function _default() {\n      return mutable([]);\n    }\n  }\n});\nvar collapseEmits = (_collapseEmits = {}, _defineProperty(_collapseEmits, UPDATE_MODEL_EVENT, emitChangeFn), _defineProperty(_collapseEmits, CHANGE_EVENT, emitChangeFn), _collapseEmits);\nexport { collapseEmits, collapseProps, emitChangeFn };","map":{"version":3,"names":["emitChangeFn","value","_typeof","isNumber","collapseProps","buildProps","accordion","Boolean","modelValue","type","definePropType","Array","String","Number","_default","mutable","collapseEmits","_collapseEmits","_defineProperty","UPDATE_MODEL_EVENT","CHANGE_EVENT"],"sources":["../../../../../../packages/components/collapse/src/collapse.ts"],"sourcesContent":["import {\n  buildProps,\n  definePropType,\n  isNumber,\n  isString,\n  mutable,\n} from '@element-plus/utils'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type { ExtractPropTypes } from 'vue'\nimport type { Arrayable } from '@element-plus/utils'\n\nexport type CollapseActiveName = string | number\nexport type CollapseModelValue = Arrayable<CollapseActiveName>\n\nexport const emitChangeFn = (value: CollapseModelValue) =>\n  typeof isNumber(value) || isString(value) || Array.isArray(value)\n\nexport const collapseProps = buildProps({\n  accordion: Boolean,\n  modelValue: {\n    type: definePropType<CollapseModelValue>([Array, String, Number]),\n    default: () => mutable([] as const),\n  },\n} as const)\nexport type CollapseProps = ExtractPropTypes<typeof collapseProps>\n\nexport const collapseEmits = {\n  [UPDATE_MODEL_EVENT]: emitChangeFn,\n  [CHANGE_EVENT]: emitChangeFn,\n}\nexport type CollapseEmits = typeof collapseEmits\n"],"mappings":";;;;;;;;;;;AAOY,IAACA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK;EAAA,OAAAC,OAAA,CAAYC,QAAQ,CAACF,KAAK;AAAA;AAChD,IAACG,aAAa,GAAGC,UAAU,CAAC;EACtCC,SAAS,EAAEC,OAAO;EAClBC,UAAU,EAAE;IACVC,IAAI,EAAEC,cAAc,CAAC,CAACC,KAAK,EAAEC,MAAM,EAAEC,MAAM,CAAC,CAAC;IAC7C,WAAS,SAAAC,SAAA;MAAA,OAAMC,OAAO,CAAC,EAAE,CAAC;IAAA;EAC9B;AACA,CAAC;AACW,IAACC,aAAa,IAAAC,cAAA,OAAAC,eAAA,CAAAD,cAAA,EACvBE,kBAAkB,EAAGnB,YAAY,GAAAkB,eAAA,CAAAD,cAAA,EACjCG,YAAY,EAAGpB,YAAY,GAAAiB,cAAA,CAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}