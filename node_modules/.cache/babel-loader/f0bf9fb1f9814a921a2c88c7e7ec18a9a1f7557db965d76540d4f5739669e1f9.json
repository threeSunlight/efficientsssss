{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { makeInstaller } from './make-installer.mjs';\nimport Components from './component.mjs';\nimport Plugins from './plugin.mjs';\nvar installer = makeInstaller([].concat(_toConsumableArray(Components), _toConsumableArray(Plugins)));\nexport { installer as default };","map":{"version":3,"names":["installer","makeInstaller","concat","_toConsumableArray","Components","Plugins"],"sources":["../../../packages/element-plus/defaults.ts"],"sourcesContent":["import { makeInstaller } from './make-installer'\nimport Components from './component'\nimport Plugins from './plugin'\n\nexport default makeInstaller([...Components, ...Plugins])\n"],"mappings":";;;;;;;;;AAGA,IAAAA,SAAA,GAAeC,aAAa,IAAAC,MAAA,CAAAC,kBAAA,CAAKC,UAAU,GAAAD,kBAAA,CAAKE,OAAO,EAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}