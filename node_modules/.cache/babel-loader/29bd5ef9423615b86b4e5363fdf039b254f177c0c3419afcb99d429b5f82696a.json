{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport '../../utils/index.mjs';\nimport { buildProp, definePropType } from '../../utils/vue/props/runtime.mjs';\nimport { isClient } from '@vueuse/core';\nimport { isBoolean } from '../../utils/types.mjs';\nvar _prop = buildProp({\n  type: definePropType(Boolean),\n  \"default\": null\n});\nvar _event = buildProp({\n  type: definePropType(Function)\n});\nvar createModelToggleComposable = function createModelToggleComposable(name) {\n  var _useModelToggleProps;\n  var updateEventKey = \"update:\".concat(name);\n  var updateEventKeyRaw = \"onUpdate:\".concat(name);\n  var useModelToggleEmits2 = [updateEventKey];\n  var useModelToggleProps2 = (_useModelToggleProps = {}, _defineProperty(_useModelToggleProps, name, _prop), _defineProperty(_useModelToggleProps, updateEventKeyRaw, _event), _useModelToggleProps);\n  var useModelToggle2 = function useModelToggle2(_ref) {\n    var indicator = _ref.indicator,\n      toggleReason = _ref.toggleReason,\n      shouldHideWhenRouteChanges = _ref.shouldHideWhenRouteChanges,\n      shouldProceed = _ref.shouldProceed,\n      onShow = _ref.onShow,\n      onHide = _ref.onHide;\n    var instance = getCurrentInstance();\n    var emit = instance.emit;\n    var props = instance.props;\n    var hasUpdateHandler = computed(function () {\n      return isFunction(props[updateEventKeyRaw]);\n    });\n    var isModelBindingAbsent = computed(function () {\n      return props[name] === null;\n    });\n    var doShow = function doShow(event) {\n      if (indicator.value === true) {\n        return;\n      }\n      indicator.value = true;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (isFunction(onShow)) {\n        onShow(event);\n      }\n    };\n    var doHide = function doHide(event) {\n      if (indicator.value === false) {\n        return;\n      }\n      indicator.value = false;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (isFunction(onHide)) {\n        onHide(event);\n      }\n    };\n    var show = function show(event) {\n      if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed()) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event);\n      }\n    };\n    var hide = function hide(event) {\n      if (props.disabled === true || !isClient) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event);\n      }\n    };\n    var onChange = function onChange(val) {\n      if (!isBoolean(val)) return;\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n    var toggle = function toggle() {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n    watch(function () {\n      return props[name];\n    }, onChange);\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      watch(function () {\n        return _objectSpread({}, instance.proxy.$route);\n      }, function () {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n    onMounted(function () {\n      onChange(props[name]);\n    });\n    return {\n      hide: hide,\n      show: show,\n      toggle: toggle,\n      hasUpdateHandler: hasUpdateHandler\n    };\n  };\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\nvar _createModelToggleCom = createModelToggleComposable(\"modelValue\"),\n  useModelToggle = _createModelToggleCom.useModelToggle,\n  useModelToggleProps = _createModelToggleCom.useModelToggleProps,\n  useModelToggleEmits = _createModelToggleCom.useModelToggleEmits;\nexport { createModelToggleComposable, useModelToggle, useModelToggleEmits, useModelToggleProps };","map":{"version":3,"names":["_prop","buildProp","type","definePropType","Boolean","_event","Function","createModelToggleComposable","name","_useModelToggleProps","updateEventKey","concat","updateEventKeyRaw","useModelToggleEmits2","useModelToggleProps2","_defineProperty","useModelToggle2","_ref","indicator","toggleReason","shouldHideWhenRouteChanges","shouldProceed","onShow","onHide","instance","getCurrentInstance","emit","props","hasUpdateHandler","computed","isFunction","isModelBindingAbsent","doShow","event","value","doHide","show","disabled","shouldEmit","isClient","hide","onChange","val","isBoolean","toggle","watch","appContext","config","globalProperties","$route","_objectSpread","proxy","onMounted","useModelToggle","useModelToggleProps","useModelToggleEmits","_createModelToggleCom"],"sources":["../../../../../packages/hooks/use-model-toggle/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, onMounted, watch } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport {\n  buildProp,\n  definePropType,\n  isBoolean,\n  isClient,\n} from '@element-plus/utils'\nimport type { ExtractPropType } from '@element-plus/utils'\nimport type { RouteLocationNormalizedLoaded } from 'vue-router'\n\nimport type { ComponentPublicInstance, ExtractPropTypes, Ref } from 'vue'\n\nconst _prop = buildProp({\n  type: definePropType<boolean | null>(Boolean),\n  default: null,\n} as const)\nconst _event = buildProp({\n  type: definePropType<(val: boolean) => void>(Function),\n} as const)\n\nexport type UseModelTogglePropsRaw<T extends string> = {\n  [K in T]: typeof _prop\n} & {\n  [K in `onUpdate:${T}`]: typeof _event\n}\n\nexport type UseModelTogglePropsGeneric<T extends string> = {\n  [K in T]: ExtractPropType<typeof _prop>\n} & {\n  [K in `onUpdate:${T}`]: ExtractPropType<typeof _event>\n}\n\nexport const createModelToggleComposable = <T extends string>(name: T) => {\n  const updateEventKey = `update:${name}` as const\n  const updateEventKeyRaw = `onUpdate:${name}` as const\n  const useModelToggleEmits = [updateEventKey]\n\n  const useModelToggleProps = {\n    [name]: _prop,\n    [updateEventKeyRaw]: _event,\n  } as UseModelTogglePropsRaw<T>\n\n  const useModelToggle = ({\n    indicator,\n    toggleReason,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide,\n  }: ModelToggleParams) => {\n    const instance = getCurrentInstance()!\n    const { emit } = instance\n    const props = instance.props as UseModelTogglePropsGeneric<T> & {\n      disabled: boolean\n    }\n    const hasUpdateHandler = computed(() =>\n      isFunction(props[updateEventKeyRaw])\n    )\n    // when it matches the default value we say this is absent\n    // though this could be mistakenly passed from the user but we need to rule out that\n    // condition\n    const isModelBindingAbsent = computed(() => props[name] === null)\n\n    const doShow = (event?: Event) => {\n      if (indicator.value === true) {\n        return\n      }\n\n      indicator.value = true\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onShow)) {\n        onShow(event)\n      }\n    }\n\n    const doHide = (event?: Event) => {\n      if (indicator.value === false) {\n        return\n      }\n\n      indicator.value = false\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onHide)) {\n        onHide(event)\n      }\n    }\n\n    const show = (event?: Event) => {\n      if (\n        props.disabled === true ||\n        (isFunction(shouldProceed) && !shouldProceed())\n      )\n        return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, true)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event)\n      }\n    }\n\n    const hide = (event?: Event) => {\n      if (props.disabled === true || !isClient) return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, false)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event)\n      }\n    }\n\n    const onChange = (val: boolean) => {\n      if (!isBoolean(val)) return\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false)\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow()\n        } else {\n          doHide()\n        }\n      }\n    }\n\n    const toggle = () => {\n      if (indicator.value) {\n        hide()\n      } else {\n        show()\n      }\n    }\n\n    watch(() => props[name], onChange)\n\n    if (\n      shouldHideWhenRouteChanges &&\n      instance.appContext.config.globalProperties.$route !== undefined\n    ) {\n      watch(\n        () => ({\n          ...(\n            instance.proxy as ComponentPublicInstance<{\n              $route: RouteLocationNormalizedLoaded\n            }>\n          ).$route,\n        }),\n        () => {\n          if (shouldHideWhenRouteChanges.value && indicator.value) {\n            hide()\n          }\n        }\n      )\n    }\n\n    onMounted(() => {\n      onChange(props[name])\n    })\n\n    return {\n      hide,\n      show,\n      toggle,\n      hasUpdateHandler,\n    }\n  }\n\n  return {\n    useModelToggle,\n    useModelToggleProps,\n    useModelToggleEmits,\n  }\n}\n\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } =\n  createModelToggleComposable('modelValue')\n\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps }\n\nexport type UseModelToggleProps = ExtractPropTypes<typeof useModelToggleProps>\n\nexport type ModelToggleParams = {\n  indicator: Ref<boolean>\n  toggleReason?: Ref<Event | undefined>\n  shouldHideWhenRouteChanges?: Ref<boolean>\n  shouldProceed?: () => boolean\n  onShow?: (event?: Event) => void\n  onHide?: (event?: Event) => void\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}