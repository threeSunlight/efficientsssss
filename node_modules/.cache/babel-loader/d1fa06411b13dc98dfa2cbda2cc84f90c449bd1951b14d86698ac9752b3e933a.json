{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { ref, getCurrentInstance, inject, computed, unref, provide } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { configProviderContextKey } from '../constants.mjs';\nimport { useNamespace, defaultNamespace, namespaceContextKey } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale, localeContextKey } from '../../../../hooks/use-locale/index.mjs';\nimport { useZIndex, defaultInitialZIndex, zIndexContextKey } from '../../../../hooks/use-z-index/index.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\nimport { SIZE_INJECTION_KEY } from '../../../../hooks/use-size/index.mjs';\nimport { keysOf } from '../../../../utils/objects.mjs';\nvar globalConfig = ref();\nfunction useGlobalConfig(key) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n  var config = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;\n  if (key) {\n    return computed(function () {\n      var _a, _b;\n      return (_b = (_a = config.value) == null ? void 0 : _a[key]) != null ? _b : defaultValue;\n    });\n  } else {\n    return config;\n  }\n}\nfunction useGlobalComponentSettings(block, sizeFallback) {\n  var config = useGlobalConfig();\n  var ns = useNamespace(block, computed(function () {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.namespace) || defaultNamespace;\n  }));\n  var locale = useLocale(computed(function () {\n    var _a;\n    return (_a = config.value) == null ? void 0 : _a.locale;\n  }));\n  var zIndex = useZIndex(computed(function () {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.zIndex) || defaultInitialZIndex;\n  }));\n  var size = computed(function () {\n    var _a;\n    return unref(sizeFallback) || ((_a = config.value) == null ? void 0 : _a.size) || \"\";\n  });\n  provideGlobalConfig(computed(function () {\n    return unref(config) || {};\n  }));\n  return {\n    ns: ns,\n    locale: locale,\n    zIndex: zIndex,\n    size: size\n  };\n}\nvar provideGlobalConfig = function provideGlobalConfig(config, app) {\n  var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var _a;\n  var inSetup = !!getCurrentInstance();\n  var oldConfig = inSetup ? useGlobalConfig() : void 0;\n  var provideFn = (_a = app == null ? void 0 : app.provide) != null ? _a : inSetup ? provide : void 0;\n  if (!provideFn) {\n    debugWarn(\"provideGlobalConfig\", \"provideGlobalConfig() can only be used inside setup().\");\n    return;\n  }\n  var context = computed(function () {\n    var cfg = unref(config);\n    if (!(oldConfig == null ? void 0 : oldConfig.value)) return cfg;\n    return mergeConfig(oldConfig.value, cfg);\n  });\n  provideFn(configProviderContextKey, context);\n  provideFn(localeContextKey, computed(function () {\n    return context.value.locale;\n  }));\n  provideFn(namespaceContextKey, computed(function () {\n    return context.value.namespace;\n  }));\n  provideFn(zIndexContextKey, computed(function () {\n    return context.value.zIndex;\n  }));\n  provideFn(SIZE_INJECTION_KEY, {\n    size: computed(function () {\n      return context.value.size || \"\";\n    })\n  });\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value;\n  }\n  return context;\n};\nvar mergeConfig = function mergeConfig(a, b) {\n  var _a;\n  var keys = _toConsumableArray( /* @__PURE__ */new Set([].concat(_toConsumableArray(keysOf(a)), _toConsumableArray(keysOf(b)))));\n  var obj = {};\n  var _iterator = _createForOfIteratorHelper(keys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      obj[key] = (_a = b[key]) != null ? _a : a[key];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return obj;\n};\nexport { provideGlobalConfig, useGlobalComponentSettings, useGlobalConfig };","map":{"version":3,"names":["globalConfig","ref","useGlobalConfig","key","defaultValue","arguments","length","undefined","config","getCurrentInstance","inject","configProviderContextKey","computed","_a","_b","value","useGlobalComponentSettings","block","sizeFallback","ns","useNamespace","namespace","defaultNamespace","locale","useLocale","zIndex","useZIndex","defaultInitialZIndex","size","unref","provideGlobalConfig","app","global","inSetup","oldConfig","provideFn","provide","debugWarn","context","cfg","mergeConfig","localeContextKey","namespaceContextKey","zIndexContextKey","SIZE_INJECTION_KEY","a","b","keys","_toConsumableArray","Set","concat","keysOf","obj","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f"],"sources":["../../../../../../../packages/components/config-provider/src/hooks/use-global-config.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, provide, ref, unref } from 'vue'\nimport { debugWarn, keysOf } from '@element-plus/utils'\nimport {\n  SIZE_INJECTION_KEY,\n  defaultInitialZIndex,\n  defaultNamespace,\n  localeContextKey,\n  namespaceContextKey,\n  useLocale,\n  useNamespace,\n  useZIndex,\n  zIndexContextKey,\n} from '@element-plus/hooks'\nimport { configProviderContextKey } from '../constants'\n\nimport type { MaybeRef } from '@vueuse/core'\nimport type { App, Ref } from 'vue'\nimport type { ConfigProviderContext } from '../constants'\n\n// this is meant to fix global methods like `ElMessage(opts)`, this way we can inject current locale\n// into the component as default injection value.\n// refer to: https://github.com/element-plus/element-plus/issues/2610#issuecomment-887965266\nconst globalConfig = ref<ConfigProviderContext>()\n\nexport function useGlobalConfig<\n  K extends keyof ConfigProviderContext,\n  D extends ConfigProviderContext[K]\n>(\n  key: K,\n  defaultValue?: D\n): Ref<Exclude<ConfigProviderContext[K], undefined> | D>\nexport function useGlobalConfig(): Ref<ConfigProviderContext>\nexport function useGlobalConfig(\n  key?: keyof ConfigProviderContext,\n  defaultValue = undefined\n) {\n  const config = getCurrentInstance()\n    ? inject(configProviderContextKey, globalConfig)\n    : globalConfig\n  if (key) {\n    return computed(() => config.value?.[key] ?? defaultValue)\n  } else {\n    return config\n  }\n}\n\n// for components like `ElMessage` `ElNotification` `ElMessageBox`.\nexport function useGlobalComponentSettings(\n  block: string,\n  sizeFallback?: MaybeRef<ConfigProviderContext['size']>\n) {\n  const config = useGlobalConfig()\n\n  const ns = useNamespace(\n    block,\n    computed(() => config.value?.namespace || defaultNamespace)\n  )\n\n  const locale = useLocale(computed(() => config.value?.locale))\n  const zIndex = useZIndex(\n    computed(() => config.value?.zIndex || defaultInitialZIndex)\n  )\n  const size = computed(() => unref(sizeFallback) || config.value?.size || '')\n  provideGlobalConfig(computed(() => unref(config) || {}))\n\n  return {\n    ns,\n    locale,\n    zIndex,\n    size,\n  }\n}\n\nexport const provideGlobalConfig = (\n  config: MaybeRef<ConfigProviderContext>,\n  app?: App,\n  global = false\n) => {\n  const inSetup = !!getCurrentInstance()\n  const oldConfig = inSetup ? useGlobalConfig() : undefined\n\n  const provideFn = app?.provide ?? (inSetup ? provide : undefined)\n  if (!provideFn) {\n    debugWarn(\n      'provideGlobalConfig',\n      'provideGlobalConfig() can only be used inside setup().'\n    )\n    return\n  }\n\n  const context = computed(() => {\n    const cfg = unref(config)\n    if (!oldConfig?.value) return cfg\n    return mergeConfig(oldConfig.value, cfg)\n  })\n  provideFn(configProviderContextKey, context)\n  provideFn(\n    localeContextKey,\n    computed(() => context.value.locale)\n  )\n  provideFn(\n    namespaceContextKey,\n    computed(() => context.value.namespace)\n  )\n  provideFn(\n    zIndexContextKey,\n    computed(() => context.value.zIndex)\n  )\n\n  provideFn(SIZE_INJECTION_KEY, {\n    size: computed(() => context.value.size || ''),\n  })\n\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value\n  }\n  return context\n}\n\nconst mergeConfig = (\n  a: ConfigProviderContext,\n  b: ConfigProviderContext\n): ConfigProviderContext => {\n  const keys = [...new Set([...keysOf(a), ...keysOf(b)])]\n  const obj: Record<string, any> = {}\n  for (const key of keys) {\n    obj[key] = b[key] ?? a[key]\n  }\n  return obj\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}