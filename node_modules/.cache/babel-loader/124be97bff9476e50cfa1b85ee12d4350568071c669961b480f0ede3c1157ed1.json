{"ast":null,"code":"var _rateEmits;\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { StarFilled, Star } from '@element-plus/icons-vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { useSizeProp } from '../../../hooks/use-size/index.mjs';\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isNumber } from '../../../utils/types.mjs';\nvar rateProps = buildProps({\n  modelValue: {\n    type: Number,\n    \"default\": 0\n  },\n  id: {\n    type: String,\n    \"default\": void 0\n  },\n  lowThreshold: {\n    type: Number,\n    \"default\": 2\n  },\n  highThreshold: {\n    type: Number,\n    \"default\": 4\n  },\n  max: {\n    type: Number,\n    \"default\": 5\n  },\n  colors: {\n    type: definePropType([Array, Object]),\n    \"default\": function _default() {\n      return mutable([\"\", \"\", \"\"]);\n    }\n  },\n  voidColor: {\n    type: String,\n    \"default\": \"\"\n  },\n  disabledVoidColor: {\n    type: String,\n    \"default\": \"\"\n  },\n  icons: {\n    type: definePropType([Array, Object]),\n    \"default\": function _default() {\n      return [StarFilled, StarFilled, StarFilled];\n    }\n  },\n  voidIcon: {\n    type: iconPropType,\n    \"default\": function _default() {\n      return Star;\n    }\n  },\n  disabledVoidIcon: {\n    type: iconPropType,\n    \"default\": function _default() {\n      return StarFilled;\n    }\n  },\n  disabled: Boolean,\n  allowHalf: Boolean,\n  showText: Boolean,\n  showScore: Boolean,\n  textColor: {\n    type: String,\n    \"default\": \"\"\n  },\n  texts: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return mutable([\"Extremely bad\", \"Disappointed\", \"Fair\", \"Satisfied\", \"Surprise\"]);\n    }\n  },\n  scoreTemplate: {\n    type: String,\n    \"default\": \"{value}\"\n  },\n  size: useSizeProp,\n  label: {\n    type: String,\n    \"default\": void 0\n  },\n  clearable: {\n    type: Boolean,\n    \"default\": false\n  }\n});\nvar rateEmits = (_rateEmits = {}, _defineProperty(_rateEmits, CHANGE_EVENT, function (value) {\n  return isNumber(value);\n}), _defineProperty(_rateEmits, UPDATE_MODEL_EVENT, function (value) {\n  return isNumber(value);\n}), _rateEmits);\nexport { rateEmits, rateProps };","map":{"version":3,"names":["rateProps","buildProps","modelValue","type","Number","id","String","lowThreshold","highThreshold","max","colors","definePropType","Array","Object","_default","mutable","voidColor","disabledVoidColor","icons","StarFilled","voidIcon","iconPropType","Star","disabledVoidIcon","disabled","Boolean","allowHalf","showText","showScore","textColor","texts","scoreTemplate","size","useSizeProp","label","clearable","rateEmits","_rateEmits","_defineProperty","CHANGE_EVENT","value","isNumber","UPDATE_MODEL_EVENT"],"sources":["../../../../../../packages/components/rate/src/rate.ts"],"sourcesContent":["import { Star, StarFilled } from '@element-plus/icons-vue'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport {\n  buildProps,\n  definePropType,\n  iconPropType,\n  isNumber,\n  mutable,\n} from '@element-plus/utils'\nimport { useSizeProp } from '@element-plus/hooks'\nimport type { Component, ExtractPropTypes } from 'vue'\nimport type Rate from './rate.vue'\n\nexport const rateProps = buildProps({\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description native `id` attribute\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description threshold value between low and medium level. The value itself will be included in low level\n   */\n  lowThreshold: {\n    type: Number,\n    default: 2,\n  },\n  /**\n   * @description threshold value between medium and high level. The value itself will be included in high level\n   */\n  highThreshold: {\n    type: Number,\n    default: 4,\n  },\n  /**\n   * @description max rating score\n   */\n  max: {\n    type: Number,\n    default: 5,\n  },\n  /**\n   * @description colors for icons. If array, it should have 3 elements, each of which corresponds with a score level, else if object, the key should be threshold value between two levels, and the value should be corresponding color\n   */\n  colors: {\n    type: definePropType<string[] | Record<number, string>>([Array, Object]),\n    default: () => mutable(['', '', ''] as const),\n  },\n  /**\n   * @description color of unselected icons\n   */\n  voidColor: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description color of unselected read-only icons\n   */\n  disabledVoidColor: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description icon components. If array, it should have 3 elements, each of which corresponds with a score level, else if object, the key should be threshold value between two levels, and the value should be corresponding icon component\n   */\n  icons: {\n    type: definePropType<\n      Array<string | Component> | Record<number, string | Component>\n    >([Array, Object]),\n    default: () => [StarFilled, StarFilled, StarFilled],\n  },\n  /**\n   * @description component of unselected icons\n   */\n  voidIcon: {\n    type: iconPropType,\n    default: () => Star,\n  },\n  /**\n   * @description component of unselected read-only icons\n   */\n  disabledVoidIcon: {\n    type: iconPropType,\n    default: () => StarFilled,\n  },\n  /**\n   * @description whether Rate is read-only\n   */\n  disabled: Boolean,\n  /**\n   * @description whether picking half start is allowed\n   */\n  allowHalf: Boolean,\n  /**\n   * @description whether to display texts\n   */\n  showText: Boolean,\n  /**\n   * @description whether to display current score. show-score and show-text cannot be true at the same time\n   */\n  showScore: Boolean,\n  /**\n   * @description color of texts\n   */\n  textColor: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description text array\n   */\n  texts: {\n    type: definePropType<string[]>(Array),\n    default: () =>\n      mutable([\n        'Extremely bad',\n        'Disappointed',\n        'Fair',\n        'Satisfied',\n        'Surprise',\n      ] as const),\n  },\n  /**\n   * @description score template\n   */\n  scoreTemplate: {\n    type: String,\n    default: '{value}',\n  },\n  /**\n   * @description size of Rate\n   */\n  size: useSizeProp,\n  /**\n   * @description same as `aria-label` in Rate\n   */\n  label: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description whether value can be reset to `0`\n   */\n  clearable: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport type RateProps = ExtractPropTypes<typeof rateProps>\n\nexport const rateEmits = {\n  [CHANGE_EVENT]: (value: number) => isNumber(value),\n  [UPDATE_MODEL_EVENT]: (value: number) => isNumber(value),\n}\nexport type RateEmits = typeof rateEmits\n\nexport type RateInstance = InstanceType<typeof Rate>\n"],"mappings":";;;;;;;;;;;;;;;AAUY,IAACA,SAAS,GAAGC,UAAU,CAAC;EAClCC,UAAU,EAAE;IACVC,IAAI,EAAEC,MAAM;IACZ,WAAS;EACb,CAAG;EACDC,EAAE,EAAE;IACFF,IAAI,EAAEG,MAAM;IACZ,WAAS,KAAK;EAClB,CAAG;EACDC,YAAY,EAAE;IACZJ,IAAI,EAAEC,MAAM;IACZ,WAAS;EACb,CAAG;EACDI,aAAa,EAAE;IACbL,IAAI,EAAEC,MAAM;IACZ,WAAS;EACb,CAAG;EACDK,GAAG,EAAE;IACHN,IAAI,EAAEC,MAAM;IACZ,WAAS;EACb,CAAG;EACDM,MAAM,EAAE;IACNP,IAAI,EAAEQ,cAAc,CAAC,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAC;IACrC,WAAS,SAAAC,SAAA;MAAA,OAAMC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAAA;EACxC,CAAG;EACDC,SAAS,EAAE;IACTb,IAAI,EAAEG,MAAM;IACZ,WAAS;EACb,CAAG;EACDW,iBAAiB,EAAE;IACjBd,IAAI,EAAEG,MAAM;IACZ,WAAS;EACb,CAAG;EACDY,KAAK,EAAE;IACLf,IAAI,EAAEQ,cAAc,CAAC,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAC;IACrC,WAAS,SAAAC,SAAA;MAAA,OAAM,CAACK,UAAU,EAAEA,UAAU,EAAEA,UAAU,CAAC;IAAA;EACvD,CAAG;EACDC,QAAQ,EAAE;IACRjB,IAAI,EAAEkB,YAAY;IAClB,WAAS,SAAAP,SAAA;MAAA,OAAMQ,IAAI;IAAA;EACvB,CAAG;EACDC,gBAAgB,EAAE;IAChBpB,IAAI,EAAEkB,YAAY;IAClB,WAAS,SAAAP,SAAA;MAAA,OAAMK,UAAU;IAAA;EAC7B,CAAG;EACDK,QAAQ,EAAEC,OAAO;EACjBC,SAAS,EAAED,OAAO;EAClBE,QAAQ,EAAEF,OAAO;EACjBG,SAAS,EAAEH,OAAO;EAClBI,SAAS,EAAE;IACT1B,IAAI,EAAEG,MAAM;IACZ,WAAS;EACb,CAAG;EACDwB,KAAK,EAAE;IACL3B,IAAI,EAAEQ,cAAc,CAACC,KAAK,CAAC;IAC3B,WAAS,SAAAE,SAAA;MAAA,OAAMC,OAAO,CAAC,CACrB,eAAe,EACf,cAAc,EACd,MAAM,EACN,WAAW,EACX,UAAU,CACX,CAAC;IAAA;EACN,CAAG;EACDgB,aAAa,EAAE;IACb5B,IAAI,EAAEG,MAAM;IACZ,WAAS;EACb,CAAG;EACD0B,IAAI,EAAEC,WAAW;EACjBC,KAAK,EAAE;IACL/B,IAAI,EAAEG,MAAM;IACZ,WAAS,KAAK;EAClB,CAAG;EACD6B,SAAS,EAAE;IACThC,IAAI,EAAEsB,OAAO;IACb,WAAS;EACb;AACA,CAAC;AACW,IAACW,SAAS,IAAAC,UAAA,OAAAC,eAAA,CAAAD,UAAA,EACnBE,YAAY,EAAG,UAACC,KAAK;EAAA,OAAKC,QAAQ,CAACD,KAAK,CAAC;AAAA,IAAAF,eAAA,CAAAD,UAAA,EACzCK,kBAAkB,EAAG,UAACF,KAAK;EAAA,OAAKC,QAAQ,CAACD,KAAK,CAAC;AAAA,IAAAH,UAAA,CAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}