{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { ref, shallowRef, watch, computed, nextTick } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { TreeOptionsEnum, NODE_CLICK, CURRENT_CHANGE, NODE_EXPAND, NODE_COLLAPSE } from '../virtual-tree.mjs';\nimport { useCheck } from './useCheck.mjs';\nimport { useFilter } from './useFilter.mjs';\nimport { isObject } from '@vue/shared';\nfunction useTree(props, emit) {\n  var expandedKeySet = ref(new Set(props.defaultExpandedKeys));\n  var currentKey = ref();\n  var tree = shallowRef();\n  watch(function () {\n    return props.currentNodeKey;\n  }, function (key) {\n    currentKey.value = key;\n  }, {\n    immediate: true\n  });\n  watch(function () {\n    return props.data;\n  }, function (data) {\n    setData(data);\n  }, {\n    immediate: true\n  });\n  var _useCheck = useCheck(props, tree),\n    isIndeterminate = _useCheck.isIndeterminate,\n    isChecked = _useCheck.isChecked,\n    toggleCheckbox = _useCheck.toggleCheckbox,\n    getCheckedKeys = _useCheck.getCheckedKeys,\n    getCheckedNodes = _useCheck.getCheckedNodes,\n    getHalfCheckedKeys = _useCheck.getHalfCheckedKeys,\n    getHalfCheckedNodes = _useCheck.getHalfCheckedNodes,\n    setChecked = _useCheck.setChecked,\n    setCheckedKeys = _useCheck.setCheckedKeys;\n  var _useFilter = useFilter(props, tree),\n    doFilter = _useFilter.doFilter,\n    hiddenNodeKeySet = _useFilter.hiddenNodeKeySet,\n    isForceHiddenExpandIcon = _useFilter.isForceHiddenExpandIcon;\n  var valueKey = computed(function () {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.value) || TreeOptionsEnum.KEY;\n  });\n  var childrenKey = computed(function () {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.children) || TreeOptionsEnum.CHILDREN;\n  });\n  var disabledKey = computed(function () {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.disabled) || TreeOptionsEnum.DISABLED;\n  });\n  var labelKey = computed(function () {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.label) || TreeOptionsEnum.LABEL;\n  });\n  var flattenTree = computed(function () {\n    var expandedKeys = expandedKeySet.value;\n    var hiddenKeys = hiddenNodeKeySet.value;\n    var flattenNodes = [];\n    var nodes = tree.value && tree.value.treeNodes || [];\n    function traverse() {\n      var stack = [];\n      for (var i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i]);\n      }\n      while (stack.length) {\n        var node = stack.pop();\n        if (!node) continue;\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node);\n        }\n        if (expandedKeys.has(node.key)) {\n          var children = node.children;\n          if (children) {\n            var length = children.length;\n            for (var _i = length - 1; _i >= 0; --_i) {\n              stack.push(children[_i]);\n            }\n          }\n        }\n      }\n    }\n    traverse();\n    return flattenNodes;\n  });\n  var isNotEmpty = computed(function () {\n    return flattenTree.value.length > 0;\n  });\n  function createTree(data) {\n    var treeNodeMap = /* @__PURE__ */new Map();\n    var levelTreeNodeMap = /* @__PURE__ */new Map();\n    var maxLevel = 1;\n    function traverse(nodes) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;\n      var _a;\n      var siblings = [];\n      var _iterator = _createForOfIteratorHelper(nodes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var rawNode = _step.value;\n          var value = getKey(rawNode);\n          var node = {\n            level: level,\n            key: value,\n            data: rawNode\n          };\n          node.label = getLabel(rawNode);\n          node.parent = parent;\n          var children = getChildren(rawNode);\n          node.disabled = getDisabled(rawNode);\n          node.isLeaf = !children || children.length === 0;\n          if (children && children.length) {\n            node.children = traverse(children, level + 1, node);\n          }\n          siblings.push(node);\n          treeNodeMap.set(value, node);\n          if (!levelTreeNodeMap.has(level)) {\n            levelTreeNodeMap.set(level, []);\n          }\n          (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (level > maxLevel) {\n        maxLevel = level;\n      }\n      return siblings;\n    }\n    var treeNodes = traverse(data);\n    return {\n      treeNodeMap: treeNodeMap,\n      levelTreeNodeMap: levelTreeNodeMap,\n      maxLevel: maxLevel,\n      treeNodes: treeNodes\n    };\n  }\n  function filter(query) {\n    var keys = doFilter(query);\n    if (keys) {\n      expandedKeySet.value = keys;\n    }\n  }\n  function getChildren(node) {\n    return node[childrenKey.value];\n  }\n  function getKey(node) {\n    if (!node) {\n      return \"\";\n    }\n    return node[valueKey.value];\n  }\n  function getDisabled(node) {\n    return node[disabledKey.value];\n  }\n  function getLabel(node) {\n    return node[labelKey.value];\n  }\n  function toggleExpand(node) {\n    var expandedKeys = expandedKeySet.value;\n    if (expandedKeys.has(node.key)) {\n      collapseNode(node);\n    } else {\n      expandNode(node);\n    }\n  }\n  function setExpandedKeys(keys) {\n    expandedKeySet.value = new Set(keys);\n  }\n  function handleNodeClick(node, e) {\n    emit(NODE_CLICK, node.data, node, e);\n    handleCurrentChange(node);\n    if (props.expandOnClickNode) {\n      toggleExpand(node);\n    }\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true);\n    }\n  }\n  function handleCurrentChange(node) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key;\n      emit(CURRENT_CHANGE, node.data, node);\n    }\n  }\n  function handleNodeCheck(node, checked) {\n    toggleCheckbox(node, checked);\n  }\n  function expandNode(node) {\n    var keySet = expandedKeySet.value;\n    if (tree.value && props.accordion) {\n      var treeNodeMap = tree.value.treeNodeMap;\n      keySet.forEach(function (key) {\n        var treeNode = treeNodeMap.get(key);\n        if (node && node.level === (treeNode == null ? void 0 : treeNode.level)) {\n          keySet[\"delete\"](key);\n        }\n      });\n    }\n    keySet.add(node.key);\n    emit(NODE_EXPAND, node.data, node);\n  }\n  function collapseNode(node) {\n    expandedKeySet.value[\"delete\"](node.key);\n    emit(NODE_COLLAPSE, node.data, node);\n  }\n  function isExpanded(node) {\n    return expandedKeySet.value.has(node.key);\n  }\n  function isDisabled(node) {\n    return !!node.disabled;\n  }\n  function isCurrent(node) {\n    var current = currentKey.value;\n    return !!current && current === node.key;\n  }\n  function getCurrentNode() {\n    var _a, _b;\n    if (!currentKey.value) return void 0;\n    return (_b = (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;\n  }\n  function getCurrentKey() {\n    return currentKey.value;\n  }\n  function setCurrentKey(key) {\n    currentKey.value = key;\n  }\n  function setData(data) {\n    nextTick(function () {\n      return tree.value = createTree(data);\n    });\n  }\n  function getNode(data) {\n    var _a;\n    var key = isObject(data) ? getKey(data) : data;\n    return (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(key);\n  }\n  return {\n    tree: tree,\n    flattenTree: flattenTree,\n    isNotEmpty: isNotEmpty,\n    getKey: getKey,\n    getChildren: getChildren,\n    toggleExpand: toggleExpand,\n    toggleCheckbox: toggleCheckbox,\n    isExpanded: isExpanded,\n    isChecked: isChecked,\n    isIndeterminate: isIndeterminate,\n    isDisabled: isDisabled,\n    isCurrent: isCurrent,\n    isForceHiddenExpandIcon: isForceHiddenExpandIcon,\n    handleNodeClick: handleNodeClick,\n    handleNodeCheck: handleNodeCheck,\n    getCurrentNode: getCurrentNode,\n    getCurrentKey: getCurrentKey,\n    setCurrentKey: setCurrentKey,\n    getCheckedKeys: getCheckedKeys,\n    getCheckedNodes: getCheckedNodes,\n    getHalfCheckedKeys: getHalfCheckedKeys,\n    getHalfCheckedNodes: getHalfCheckedNodes,\n    setChecked: setChecked,\n    setCheckedKeys: setCheckedKeys,\n    filter: filter,\n    setData: setData,\n    getNode: getNode,\n    expandNode: expandNode,\n    collapseNode: collapseNode,\n    setExpandedKeys: setExpandedKeys\n  };\n}\nexport { useTree };","map":{"version":3,"names":["useTree","props","emit","expandedKeySet","ref","Set","defaultExpandedKeys","currentKey","tree","shallowRef","watch","currentNodeKey","key","value","immediate","data","setData","_useCheck","useCheck","isIndeterminate","isChecked","toggleCheckbox","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","_useFilter","useFilter","doFilter","hiddenNodeKeySet","isForceHiddenExpandIcon","valueKey","computed","_a","TreeOptionsEnum","KEY","childrenKey","children","CHILDREN","disabledKey","disabled","DISABLED","labelKey","label","LABEL","flattenTree","expandedKeys","hiddenKeys","flattenNodes","nodes","treeNodes","traverse","stack","i","length","push","node","pop","has","isNotEmpty","createTree","treeNodeMap","Map","levelTreeNodeMap","maxLevel","level","arguments","undefined","parent","siblings","_iterator","_createForOfIteratorHelper","_step","s","n","done","rawNode","getKey","getLabel","getChildren","getDisabled","isLeaf","set","get","err","e","f","filter","query","keys","toggleExpand","collapseNode","expandNode","setExpandedKeys","handleNodeClick","NODE_CLICK","handleCurrentChange","expandOnClickNode","showCheckbox","checkOnClickNode","isCurrent","CURRENT_CHANGE","handleNodeCheck","checked","keySet","accordion","forEach","treeNode","add","NODE_EXPAND","NODE_COLLAPSE","isExpanded","isDisabled","current","getCurrentNode","_b","getCurrentKey","setCurrentKey","nextTick","getNode","isObject"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useTree.ts"],"sourcesContent":["import { computed, nextTick, ref, shallowRef, watch } from 'vue'\nimport { isObject } from '@element-plus/utils'\nimport {\n  CURRENT_CHANGE,\n  NODE_CLICK,\n  NODE_COLLAPSE,\n  NODE_EXPAND,\n  TreeOptionsEnum,\n} from '../virtual-tree'\nimport { useCheck } from './useCheck'\nimport { useFilter } from './useFilter'\nimport type { SetupContext } from 'vue'\nimport type { treeEmits } from '../virtual-tree'\nimport type { CheckboxValueType } from '@element-plus/components/checkbox'\nimport type {\n  Tree,\n  TreeData,\n  TreeKey,\n  TreeNode,\n  TreeNodeData,\n  TreeProps,\n} from '../types'\n\nexport function useTree(\n  props: TreeProps,\n  emit: SetupContext<typeof treeEmits>['emit']\n) {\n  const expandedKeySet = ref<Set<TreeKey>>(new Set(props.defaultExpandedKeys))\n  const currentKey = ref<TreeKey | undefined>()\n  const tree = shallowRef<Tree | undefined>()\n\n  watch(\n    () => props.currentNodeKey,\n    (key) => {\n      currentKey.value = key\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.data,\n    (data: TreeData) => {\n      setData(data)\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n  } = useCheck(props, tree)\n\n  const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(\n    props,\n    tree\n  )\n\n  const valueKey = computed(() => {\n    return props.props?.value || TreeOptionsEnum.KEY\n  })\n  const childrenKey = computed(() => {\n    return props.props?.children || TreeOptionsEnum.CHILDREN\n  })\n  const disabledKey = computed(() => {\n    return props.props?.disabled || TreeOptionsEnum.DISABLED\n  })\n  const labelKey = computed(() => {\n    return props.props?.label || TreeOptionsEnum.LABEL\n  })\n\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value\n    const hiddenKeys = hiddenNodeKeySet.value\n    const flattenNodes: TreeNode[] = []\n    const nodes = (tree.value && tree.value.treeNodes) || []\n    function traverse() {\n      const stack: TreeNode[] = []\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i])\n      }\n      while (stack.length) {\n        const node = stack.pop()\n        if (!node) continue\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node)\n        }\n        // Only \"visible\" nodes will be rendered\n        if (expandedKeys.has(node.key)) {\n          const children = node.children\n          if (children) {\n            const length = children.length\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i])\n            }\n          }\n        }\n      }\n    }\n    traverse()\n    return flattenNodes\n  })\n\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0\n  })\n\n  function createTree(data: TreeData): Tree {\n    const treeNodeMap: Map<TreeKey, TreeNode> = new Map()\n    const levelTreeNodeMap: Map<number, TreeNode[]> = new Map()\n    let maxLevel = 1\n    function traverse(\n      nodes: TreeData,\n      level = 1,\n      parent: TreeNode | undefined = undefined\n    ) {\n      const siblings: TreeNode[] = []\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode)\n        const node: TreeNode = {\n          level,\n          key: value,\n          data: rawNode,\n        }\n        node.label = getLabel(rawNode)\n        node.parent = parent\n        const children = getChildren(rawNode)\n        node.disabled = getDisabled(rawNode)\n        node.isLeaf = !children || children.length === 0\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node)\n        }\n        siblings.push(node)\n        treeNodeMap.set(value, node)\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, [])\n        }\n        levelTreeNodeMap.get(level)?.push(node)\n      }\n      if (level > maxLevel) {\n        maxLevel = level\n      }\n      return siblings\n    }\n    const treeNodes: TreeNode[] = traverse(data)\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes,\n    }\n  }\n\n  function filter(query: string) {\n    const keys = doFilter(query)\n    if (keys) {\n      expandedKeySet.value = keys\n    }\n  }\n\n  function getChildren(node: TreeNodeData): TreeNodeData[] {\n    return node[childrenKey.value]\n  }\n\n  function getKey(node: TreeNodeData): TreeKey {\n    if (!node) {\n      return ''\n    }\n    return node[valueKey.value]\n  }\n\n  function getDisabled(node: TreeNodeData): boolean {\n    return node[disabledKey.value]\n  }\n\n  function getLabel(node: TreeNodeData): string {\n    return node[labelKey.value]\n  }\n\n  function toggleExpand(node: TreeNode) {\n    const expandedKeys = expandedKeySet.value\n    if (expandedKeys.has(node.key)) {\n      collapseNode(node)\n    } else {\n      expandNode(node)\n    }\n  }\n\n  function setExpandedKeys(keys: TreeKey[]) {\n    expandedKeySet.value = new Set(keys)\n  }\n\n  function handleNodeClick(node: TreeNode, e: MouseEvent) {\n    emit(NODE_CLICK, node.data, node, e)\n    handleCurrentChange(node)\n    if (props.expandOnClickNode) {\n      toggleExpand(node)\n    }\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true)\n    }\n  }\n\n  function handleCurrentChange(node: TreeNode) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key\n      emit(CURRENT_CHANGE, node.data, node)\n    }\n  }\n\n  function handleNodeCheck(node: TreeNode, checked: CheckboxValueType) {\n    toggleCheckbox(node, checked)\n  }\n\n  function expandNode(node: TreeNode) {\n    const keySet = expandedKeySet.value\n    if (tree.value && props.accordion) {\n      // whether only one node among the same level can be expanded at one time\n      const { treeNodeMap } = tree.value\n      keySet.forEach((key) => {\n        const treeNode = treeNodeMap.get(key)\n        if (node && node.level === treeNode?.level) {\n          keySet.delete(key)\n        }\n      })\n    }\n    keySet.add(node.key)\n    emit(NODE_EXPAND, node.data, node)\n  }\n\n  function collapseNode(node: TreeNode) {\n    expandedKeySet.value.delete(node.key)\n    emit(NODE_COLLAPSE, node.data, node)\n  }\n\n  function isExpanded(node: TreeNode): boolean {\n    return expandedKeySet.value.has(node.key)\n  }\n\n  function isDisabled(node: TreeNode): boolean {\n    return !!node.disabled\n  }\n\n  function isCurrent(node: TreeNode): boolean {\n    const current = currentKey.value\n    return !!current && current === node.key\n  }\n\n  function getCurrentNode(): TreeNodeData | undefined {\n    if (!currentKey.value) return undefined\n    return tree.value?.treeNodeMap.get(currentKey.value)?.data\n  }\n\n  function getCurrentKey(): TreeKey | undefined {\n    return currentKey.value\n  }\n\n  function setCurrentKey(key: TreeKey): void {\n    currentKey.value = key\n  }\n\n  function setData(data: TreeData) {\n    nextTick(() => (tree.value = createTree(data)))\n  }\n\n  function getNode(data: TreeKey | TreeNodeData) {\n    const key = isObject(data) ? getKey(data) : data\n    return tree.value?.treeNodeMap.get(key)\n  }\n\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    // expose\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData,\n    getNode,\n    expandNode,\n    collapseNode,\n    setExpandedKeys,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}