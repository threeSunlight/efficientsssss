{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { defineComponent, useSlots, computed, provide, getCurrentInstance, openBlock, createElementBlock, normalizeClass, unref, createBlock, withCtx, normalizeStyle, createElementVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../form/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport { useTree } from './composables/useTree.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { formItemContextKey } from '../../form/src/constants.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nvar __default__ = defineComponent({\n  name: \"ElTreeV2\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: treeProps,\n  emits: treeEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var slots = useSlots();\n    var treeNodeSize = computed(function () {\n      return props.itemSize;\n    });\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx: {\n        emit: emit,\n        slots: slots\n      },\n      props: props,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var ns = useNamespace(\"tree\");\n    var _useTree = useTree(props, emit),\n      flattenTree = _useTree.flattenTree,\n      isNotEmpty = _useTree.isNotEmpty,\n      toggleExpand = _useTree.toggleExpand,\n      isExpanded = _useTree.isExpanded,\n      isIndeterminate = _useTree.isIndeterminate,\n      isChecked = _useTree.isChecked,\n      isDisabled = _useTree.isDisabled,\n      isCurrent = _useTree.isCurrent,\n      isForceHiddenExpandIcon = _useTree.isForceHiddenExpandIcon,\n      handleNodeClick = _useTree.handleNodeClick,\n      handleNodeCheck = _useTree.handleNodeCheck,\n      toggleCheckbox = _useTree.toggleCheckbox,\n      getCurrentNode = _useTree.getCurrentNode,\n      getCurrentKey = _useTree.getCurrentKey,\n      setCurrentKey = _useTree.setCurrentKey,\n      getCheckedKeys = _useTree.getCheckedKeys,\n      getCheckedNodes = _useTree.getCheckedNodes,\n      getHalfCheckedKeys = _useTree.getHalfCheckedKeys,\n      getHalfCheckedNodes = _useTree.getHalfCheckedNodes,\n      setChecked = _useTree.setChecked,\n      setCheckedKeys = _useTree.setCheckedKeys,\n      filter = _useTree.filter,\n      setData = _useTree.setData,\n      getNode = _useTree.getNode,\n      expandNode = _useTree.expandNode,\n      collapseNode = _useTree.collapseNode,\n      setExpandedKeys = _useTree.setExpandedKeys;\n    expose({\n      toggleCheckbox: toggleCheckbox,\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCurrentKey: setCurrentKey,\n      getCheckedKeys: getCheckedKeys,\n      getCheckedNodes: getCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      setChecked: setChecked,\n      setCheckedKeys: setCheckedKeys,\n      filter: filter,\n      setData: setData,\n      getNode: getNode,\n      expandNode: expandNode,\n      collapseNode: collapseNode,\n      setExpandedKeys: setExpandedKeys\n    });\n    return function (_ctx, _cache) {\n      var _a;\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(), _defineProperty({}, unref(ns).m(\"highlight-current\"), _ctx.highlightCurrent)]),\n        role: \"tree\"\n      }, [unref(isNotEmpty) ? (openBlock(), createBlock(unref(FixedSizeList), {\n        key: 0,\n        \"class-name\": unref(ns).b(\"virtual-list\"),\n        data: unref(flattenTree),\n        total: unref(flattenTree).length,\n        height: _ctx.height,\n        \"item-size\": unref(treeNodeSize),\n        \"perf-mode\": _ctx.perfMode\n      }, {\n        \"default\": withCtx(function (_ref3) {\n          var data = _ref3.data,\n            index = _ref3.index,\n            style = _ref3.style;\n          return [(openBlock(), createBlock(ElTreeNode, {\n            key: data[index].key,\n            style: normalizeStyle(style),\n            node: data[index],\n            expanded: unref(isExpanded)(data[index]),\n            \"show-checkbox\": _ctx.showCheckbox,\n            checked: unref(isChecked)(data[index]),\n            indeterminate: unref(isIndeterminate)(data[index]),\n            \"item-size\": unref(treeNodeSize),\n            disabled: unref(isDisabled)(data[index]),\n            current: unref(isCurrent)(data[index]),\n            \"hidden-expand-icon\": unref(isForceHiddenExpandIcon)(data[index]),\n            onClick: unref(handleNodeClick),\n            onToggle: unref(toggleExpand),\n            onCheck: unref(handleNodeCheck)\n          }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"item-size\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"]))];\n        }),\n        _: 1\n      }, 8, [\"class-name\", \"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(unref(ns).e(\"empty-block\"))\n      }, [createElementVNode(\"span\", {\n        \"class\": normalizeClass(unref(ns).e(\"empty-text\"))\n      }, toDisplayString((_a = _ctx.emptyText) != null ? _a : unref(t)(\"el.tree.emptyText\")), 3)], 2))], 2);\n    };\n  }\n}));\nvar TreeV2 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree.vue\"]]);\nexport { TreeV2 as default };","map":{"version":3,"names":["name","slots","useSlots","treeNodeSize","computed","props","itemSize","provide","ROOT_TREE_INJECTION_KEY","ctx","emit","instance","getCurrentInstance","formItemContextKey","_useLocale","useLocale","t","ns","useNamespace","_useTree","useTree","flattenTree","isNotEmpty","toggleExpand","isExpanded","isIndeterminate","isChecked","isDisabled","isCurrent","isForceHiddenExpandIcon","handleNodeClick","handleNodeCheck","toggleCheckbox","getCurrentNode","getCurrentKey","setCurrentKey","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","filter","setData","getNode","expandNode","collapseNode","setExpandedKeys","expose"],"sources":["../../../../../../packages/components/tree-v2/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), { [ns.m('highlight-current')]: highlightCurrent }]\"\n    role=\"tree\"\n  >\n    <fixed-size-list\n      v-if=\"isNotEmpty\"\n      :class-name=\"ns.b('virtual-list')\"\n      :data=\"flattenTree\"\n      :total=\"flattenTree.length\"\n      :height=\"height\"\n      :item-size=\"treeNodeSize\"\n      :perf-mode=\"perfMode\"\n    >\n      <template #default=\"{ data, index, style }\">\n        <el-tree-node\n          :key=\"data[index].key\"\n          :style=\"style\"\n          :node=\"data[index]\"\n          :expanded=\"isExpanded(data[index])\"\n          :show-checkbox=\"showCheckbox\"\n          :checked=\"isChecked(data[index])\"\n          :indeterminate=\"isIndeterminate(data[index])\"\n          :item-size=\"treeNodeSize\"\n          :disabled=\"isDisabled(data[index])\"\n          :current=\"isCurrent(data[index])\"\n          :hidden-expand-icon=\"isForceHiddenExpandIcon(data[index])\"\n          @click=\"handleNodeClick\"\n          @toggle=\"toggleExpand\"\n          @check=\"handleNodeCheck\"\n        />\n      </template>\n    </fixed-size-list>\n    <div v-else :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, getCurrentInstance, provide, useSlots } from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/components/form'\nimport { FixedSizeList } from '@element-plus/components/virtual-list'\nimport { useTree } from './composables/useTree'\nimport ElTreeNode from './tree-node.vue'\nimport { ROOT_TREE_INJECTION_KEY, treeEmits, treeProps } from './virtual-tree'\n\ndefineOptions({\n  name: 'ElTreeV2',\n})\n\nconst props = defineProps(treeProps)\nconst emit = defineEmits(treeEmits)\n\nconst slots = useSlots()\n\nconst treeNodeSize = computed(() => props.itemSize)\n\nprovide(ROOT_TREE_INJECTION_KEY, {\n  ctx: {\n    emit,\n    slots,\n  },\n  props,\n  instance: getCurrentInstance()!,\n})\nprovide(formItemContextKey, undefined)\nconst { t } = useLocale()\nconst ns = useNamespace('tree')\nconst {\n  flattenTree,\n  isNotEmpty,\n  toggleExpand,\n  isExpanded,\n  isIndeterminate,\n  isChecked,\n  isDisabled,\n  isCurrent,\n  isForceHiddenExpandIcon,\n  handleNodeClick,\n  handleNodeCheck,\n  // expose\n  toggleCheckbox,\n  getCurrentNode,\n  getCurrentKey,\n  setCurrentKey,\n  getCheckedKeys,\n  getCheckedNodes,\n  getHalfCheckedKeys,\n  getHalfCheckedNodes,\n  setChecked,\n  setCheckedKeys,\n  filter,\n  setData,\n  getNode,\n  expandNode,\n  collapseNode,\n  setExpandedKeys,\n} = useTree(props, emit)\n\ndefineExpose({\n  toggleCheckbox,\n  getCurrentNode,\n  getCurrentKey,\n  setCurrentKey,\n  getCheckedKeys,\n  getCheckedNodes,\n  getHalfCheckedKeys,\n  getHalfCheckedNodes,\n  setChecked,\n  setCheckedKeys,\n  filter,\n  setData,\n  getNode,\n  expandNode,\n  collapseNode,\n  setExpandedKeys,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;iCAkDc;EACZA,IAAM;AACR;;;;;;;;IAKA,IAAMC,KAAA,GAAQC,QAAS;IAEvB,IAAMC,YAAe,GAAAC,QAAA,CAAS;MAAA,OAAMC,KAAA,CAAMC,QAAQ;IAAA;IAElDC,OAAA,CAAQC,uBAAyB;MAC/BC,GAAK;QACHC,IAAA,EAAAA,IAAA;QACAT,KAAA,EAAAA;MAAA,CACF;MACAI,KAAA,EAAAA,KAAA;MACAM,QAAA,EAAUC,kBAAmB;IAAA,CAC9B;IACDL,OAAA,CAAQM,kBAAA,EAAoB,KAAS;IAC/B,IAAAC,UAAA,GAAQC,SAAU;MAAhBC,CAAA,GAAAF,UAAA,CAAAE,CAAA;IACF,IAAAC,EAAA,GAAKC,YAAA,CAAa,MAAM;IACxB,IAAAC,QAAA,GA6BFC,OAAA,CAAQf,KAAA,EAAOK,IAAI;MA5BrBW,WAAA,GAAAF,QAAA,CAAAE,WAAA;MACAC,UAAA,GAAAH,QAAA,CAAAG,UAAA;MACAC,YAAA,GAAAJ,QAAA,CAAAI,YAAA;MACAC,UAAA,GAAAL,QAAA,CAAAK,UAAA;MACAC,eAAA,GAAAN,QAAA,CAAAM,eAAA;MACAC,SAAA,GAAAP,QAAA,CAAAO,SAAA;MACAC,UAAA,GAAAR,QAAA,CAAAQ,UAAA;MACAC,SAAA,GAAAT,QAAA,CAAAS,SAAA;MACAC,uBAAA,GAAAV,QAAA,CAAAU,uBAAA;MACAC,eAAA,GAAAX,QAAA,CAAAW,eAAA;MACAC,eAAA,GAAAZ,QAAA,CAAAY,eAAA;MAEAC,cAAA,GAAAb,QAAA,CAAAa,cAAA;MACAC,cAAA,GAAAd,QAAA,CAAAc,cAAA;MACAC,aAAA,GAAAf,QAAA,CAAAe,aAAA;MACAC,aAAA,GAAAhB,QAAA,CAAAgB,aAAA;MACAC,cAAA,GAAAjB,QAAA,CAAAiB,cAAA;MACAC,eAAA,GAAAlB,QAAA,CAAAkB,eAAA;MACAC,kBAAA,GAAAnB,QAAA,CAAAmB,kBAAA;MACAC,mBAAA,GAAApB,QAAA,CAAAoB,mBAAA;MACAC,UAAA,GAAArB,QAAA,CAAAqB,UAAA;MACAC,cAAA,GAAAtB,QAAA,CAAAsB,cAAA;MACAC,MAAA,GAAAvB,QAAA,CAAAuB,MAAA;MACAC,OAAA,GAAAxB,QAAA,CAAAwB,OAAA;MACAC,OAAA,GAAAzB,QAAA,CAAAyB,OAAA;MACAC,UAAA,GAAA1B,QAAA,CAAA0B,UAAA;MACAC,YAAA,GAAA3B,QAAA,CAAA2B,YAAA;MACAC,eAAA,GAAA5B,QAAA,CAAA4B,eAAA;IAGWC,MAAA;MACXhB,cAAA,EAAAA,cAAA;MACAC,cAAA,EAAAA,cAAA;MACAC,aAAA,EAAAA,aAAA;MACAC,aAAA,EAAAA,aAAA;MACAC,cAAA,EAAAA,cAAA;MACAC,eAAA,EAAAA,eAAA;MACAC,kBAAA,EAAAA,kBAAA;MACAC,mBAAA,EAAAA,mBAAA;MACAC,UAAA,EAAAA,UAAA;MACAC,cAAA,EAAAA,cAAA;MACAC,MAAA,EAAAA,MAAA;MACAC,OAAA,EAAAA,OAAA;MACAC,OAAA,EAAAA,OAAA;MACAC,UAAA,EAAAA,UAAA;MACAC,YAAA,EAAAA,YAAA;MACAC,eAAA,EAAAA;IAAA,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}