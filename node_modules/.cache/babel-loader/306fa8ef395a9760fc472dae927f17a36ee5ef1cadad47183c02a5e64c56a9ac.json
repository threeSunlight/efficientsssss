{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nexport { castArray as ensureArray } from 'lodash-unified';\nvar unique = function unique(arr) {\n  return _toConsumableArray(new Set(arr));\n};\nvar castArray = function castArray(arr) {\n  if (!arr && arr !== 0) return [];\n  return Array.isArray(arr) ? arr : [arr];\n};\nexport { castArray, unique };","map":{"version":3,"names":["unique","arr","_toConsumableArray","Set","castArray","Array","isArray"],"sources":["../../../../packages/utils/arrays.ts"],"sourcesContent":["export const unique = <T>(arr: T[]) => [...new Set(arr)]\n\ntype Many<T> = T | ReadonlyArray<T>\n// TODO: rename to `ensureArray`\n/** like `_.castArray`, except falsy value returns empty array. */\nexport const castArray = <T>(arr: Many<T>): T[] => {\n  if (!arr && (arr as any) !== 0) return []\n  return Array.isArray(arr) ? arr : [arr]\n}\n\n// TODO: remove import alias\n// avoid naming conflicts\nexport { castArray as ensureArray } from 'lodash-unified'\n"],"mappings":";;;;;;;AAAY,IAACA,MAAM,GAAG,SAATA,MAAMA,CAAIC,GAAG;EAAA,OAAAC,kBAAA,CAAS,IAAIC,GAAG,CAACF,GAAG,CAAC;AAAA;AACnC,IAACG,SAAS,GAAG,SAAZA,SAASA,CAAIH,GAAG,EAAK;EAChC,IAAI,CAACA,GAAG,IAAIA,GAAG,KAAK,CAAC,EACnB,OAAO,EAAE;EACX,OAAOI,KAAK,CAACC,OAAO,CAACL,GAAG,CAAC,GAAGA,GAAG,GAAG,CAACA,GAAG,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}