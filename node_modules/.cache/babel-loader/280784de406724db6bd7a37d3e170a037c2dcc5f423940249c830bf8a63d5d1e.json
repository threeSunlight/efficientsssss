{"ast":null,"code":"import '../types.mjs';\nimport { isFunction } from '@vue/shared';\nvar composeRefs = function composeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return function (el) {\n    refs.forEach(function (ref) {\n      if (isFunction(ref)) {\n        ref(el);\n      } else {\n        ref.value = el;\n      }\n    });\n  };\n};\nexport { composeRefs };","map":{"version":3,"names":["composeRefs","_len","arguments","length","refs","Array","_key","el","forEach","ref","isFunction","value"],"sources":["../../../../../packages/utils/vue/refs.ts"],"sourcesContent":["import { isFunction } from '../types'\n\nimport type { ComponentPublicInstance, Ref } from 'vue'\n\nexport type RefSetter = (\n  el: Element | ComponentPublicInstance | undefined\n) => void\n\nexport const composeRefs = (\n  ...refs: (Ref<HTMLElement | undefined> | RefSetter)[]\n) => {\n  return (el: Element | ComponentPublicInstance | null) => {\n    refs.forEach((ref) => {\n      if (isFunction(ref)) {\n        ref(el as Element | ComponentPublicInstance)\n      } else {\n        ref.value = el as HTMLElement | undefined\n      }\n    })\n  }\n}\n"],"mappings":";;AACY,IAACA,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAgB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACjC,OAAO,UAACC,EAAE,EAAK;IACbH,IAAI,CAACI,OAAO,CAAC,UAACC,GAAG,EAAK;MACpB,IAAIC,UAAU,CAACD,GAAG,CAAC,EAAE;QACnBA,GAAG,CAACF,EAAE,CAAC;MACf,CAAO,MAAM;QACLE,GAAG,CAACE,KAAK,GAAGJ,EAAE;MACtB;IACA,CAAK,CAAC;EACN,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}