{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport { defineComponent, ref, computed, unref, nextTick, onMounted, watch, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { timeUnits } from '../constants.mjs';\nimport { buildTimeList } from '../utils.mjs';\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner.mjs';\nimport { getTimeLists } from '../composables/use-time-picker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getStyle } from '../../../../utils/dom/style.mjs';\nimport { vRepeatClick } from '../../../../directives/repeat-click/index.mjs';\nvar _hoisted_1 = [\"onClick\"];\nvar _hoisted_2 = [\"onMouseenter\"];\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-time-spinner\",\n  props: basicTimeSpinnerProps,\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"time\");\n    var _getTimeLists = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds),\n      getHoursList = _getTimeLists.getHoursList,\n      getMinutesList = _getTimeLists.getMinutesList,\n      getSecondsList = _getTimeLists.getSecondsList;\n    var isScrolling = false;\n    var currentScrollbar = ref();\n    var listHoursRef = ref();\n    var listMinutesRef = ref();\n    var listSecondsRef = ref();\n    var listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    var spinnerItems = computed(function () {\n      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);\n    });\n    var timePartials = computed(function () {\n      var spinnerDate = props.spinnerDate;\n      var hours = spinnerDate.hour();\n      var minutes = spinnerDate.minute();\n      var seconds = spinnerDate.second();\n      return {\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      };\n    });\n    var timeList = computed(function () {\n      var _unref = unref(timePartials),\n        hours = _unref.hours,\n        minutes = _unref.minutes;\n      return {\n        hours: getHoursList(props.role),\n        minutes: getMinutesList(hours, props.role),\n        seconds: getSecondsList(hours, minutes, props.role)\n      };\n    });\n    var arrowControlTimeList = computed(function () {\n      var _unref2 = unref(timePartials),\n        hours = _unref2.hours,\n        minutes = _unref2.minutes,\n        seconds = _unref2.seconds;\n      return {\n        hours: buildTimeList(hours, 23),\n        minutes: buildTimeList(minutes, 59),\n        seconds: buildTimeList(seconds, 59)\n      };\n    });\n    var debouncedResetScroll = debounce(function (type) {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    var getAmPmFlag = function getAmPmFlag(hour) {\n      var shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      var isCapital = props.amPmMode === \"A\";\n      var content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n    var emitSelectRange = function emitSelectRange(type) {\n      var range;\n      switch (type) {\n        case \"hours\":\n          range = [0, 2];\n          break;\n        case \"minutes\":\n          range = [3, 5];\n          break;\n        case \"seconds\":\n          range = [6, 8];\n          break;\n      }\n      var _range = range,\n        _range2 = _slicedToArray(_range, 2),\n        left = _range2[0],\n        right = _range2[1];\n      emit(\"select-range\", left, right);\n      currentScrollbar.value = type;\n    };\n    var adjustCurrentSpinner = function adjustCurrentSpinner(type) {\n      adjustSpinner(type, unref(timePartials)[type]);\n    };\n    var adjustSpinners = function adjustSpinners() {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n    var getScrollbarElement = function getScrollbarElement(el) {\n      return el.querySelector(\".\".concat(ns.namespace.value, \"-scrollbar__wrap\"));\n    };\n    var adjustSpinner = function adjustSpinner(type, value) {\n      if (props.arrowControl) return;\n      var scrollbar = unref(listRefsMap[type]);\n      if (scrollbar && scrollbar.$el) {\n        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n    var typeItemHeight = function typeItemHeight(type) {\n      var scrollbar = unref(listRefsMap[type]);\n      var listItem = scrollbar == null ? void 0 : scrollbar.$el.querySelector(\"li\");\n      if (listItem) {\n        return Number.parseFloat(getStyle(listItem, \"height\")) || 0;\n      }\n      return 0;\n    };\n    var onIncrement = function onIncrement() {\n      scrollDown(1);\n    };\n    var onDecrement = function onDecrement() {\n      scrollDown(-1);\n    };\n    var scrollDown = function scrollDown(step) {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n      var label = currentScrollbar.value;\n      var now = unref(timePartials)[label];\n      var total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      var next = findNextUnDisabled(label, now, step, total);\n      modifyDateField(label, next);\n      adjustSpinner(label, next);\n      nextTick(function () {\n        return emitSelectRange(label);\n      });\n    };\n    var findNextUnDisabled = function findNextUnDisabled(type, now, step, total) {\n      var next = (now + step + total) % total;\n      var list = unref(timeList)[type];\n      while (list[next] && next !== now) {\n        next = (next + step + total) % total;\n      }\n      return next;\n    };\n    var modifyDateField = function modifyDateField(type, value) {\n      var list = unref(timeList)[type];\n      var isDisabled = list[value];\n      if (isDisabled) return;\n      var _unref3 = unref(timePartials),\n        hours = _unref3.hours,\n        minutes = _unref3.minutes,\n        seconds = _unref3.seconds;\n      var changeTo;\n      switch (type) {\n        case \"hours\":\n          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);\n          break;\n        case \"minutes\":\n          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);\n          break;\n        case \"seconds\":\n          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);\n          break;\n      }\n      emit(\"change\", changeTo);\n    };\n    var handleClick = function handleClick(type, _ref2) {\n      var value = _ref2.value,\n        disabled = _ref2.disabled;\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n    var handleScroll = function handleScroll(type) {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      var value = Math.min(Math.round((getScrollbarElement(unref(listRefsMap[type]).$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n    var scrollBarHeight = function scrollBarHeight(type) {\n      return unref(listRefsMap[type]).$el.offsetHeight;\n    };\n    var bindScrollEvent = function bindScrollEvent() {\n      var bindFunction = function bindFunction(type) {\n        var scrollbar = unref(listRefsMap[type]);\n        if (scrollbar && scrollbar.$el) {\n          getScrollbarElement(scrollbar.$el).onscroll = function () {\n            handleScroll(type);\n          };\n        }\n      };\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n    onMounted(function () {\n      nextTick(function () {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n    var setRef = function setRef(scrollbar, type) {\n      listRefsMap[type].value = scrollbar;\n    };\n    emit(\"set-option\", [\"\".concat(props.role, \"_scrollDown\"), scrollDown]);\n    emit(\"set-option\", [\"\".concat(props.role, \"_emitSelectRange\"), emitSelectRange]);\n    watch(function () {\n      return props.spinnerDate;\n    }, function () {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(\"spinner\"), {\n          \"has-seconds\": _ctx.showSeconds\n        }])\n      }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createBlock(unref(ElScrollbar), {\n          key: item,\n          ref_for: true,\n          ref: function ref(scrollbar) {\n            return setRef(scrollbar, item);\n          },\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"wrapper\")),\n          \"wrap-style\": \"max-height: inherit;\",\n          \"view-class\": unref(ns).be(\"spinner\", \"list\"),\n          noresize: \"\",\n          tag: \"ul\",\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          },\n          onMousemove: function onMousemove($event) {\n            return adjustCurrentSpinner(item);\n          }\n        }, {\n          \"default\": withCtx(function () {\n            return [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], function (disabled, key) {\n              return openBlock(), createElementBlock(\"li\", {\n                key: key,\n                \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", key === unref(timePartials)[item]), unref(ns).is(\"disabled\", disabled)]),\n                onClick: function onClick($event) {\n                  return handleClick(item, {\n                    value: key,\n                    disabled: disabled\n                  });\n                }\n              }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n                key: 0\n              }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(getAmPmFlag(key)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n                key: 1\n              }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 64))], 10, _hoisted_1);\n            }), 128))];\n          }),\n          _: 2\n        }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createElementBlock(\"div\", {\n          key: item,\n          \"class\": normalizeClass([unref(ns).be(\"spinner\", \"wrapper\"), unref(ns).is(\"arrow\")]),\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          }\n        }, [withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-up\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowUp))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onDecrement]]), withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-down\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowDown))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onIncrement]]), createElementVNode(\"ul\", {\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"list\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], function (time, key) {\n          return openBlock(), createElementBlock(\"li\", {\n            key: key,\n            \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", time === unref(timePartials)[item]), unref(ns).is(\"disabled\", unref(timeList)[item][time])])\n          }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(getAmPmFlag(time)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 64))], 64)) : createCommentVNode(\"v-if\", true)], 2);\n        }), 128))], 2)], 42, _hoisted_2);\n      }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue\"]]);\nexport { TimeSpinner as default };","map":{"version":3,"names":["ns","useNamespace","_getTimeLists","getTimeLists","props","disabledHours","disabledMinutes","disabledSeconds","getHoursList","getMinutesList","getSecondsList","isScrolling","currentScrollbar","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","spinnerItems","computed","showSeconds","timeUnits","slice","timePartials","spinnerDate","hour","minute","second","timeList","_unref","unref","role","arrowControlTimeList","_unref2","buildTimeList","debouncedResetScroll","debounce","type","adjustCurrentSpinner","getAmPmFlag","shouldShowAmPm","amPmMode","isCapital","content","toUpperCase","emitSelectRange","range","_range","_range2","_slicedToArray","left","right","emit","value","adjustSpinner","adjustSpinners","getScrollbarElement","el","querySelector","concat","namespace","arrowControl","scrollbar","$el","scrollTop","Math","max","typeItemHeight","listItem","Number","parseFloat","getStyle","onIncrement","scrollDown","onDecrement","step","label","now","total","next","findNextUnDisabled","modifyDateField","nextTick","list","isDisabled","_unref3","changeTo","handleClick","_ref2","disabled","handleScroll","min","round","scrollBarHeight","offsetHeight","bindScrollEvent","bindFunction","onscroll","onMounted","setRef","watch"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scrollbar: unknown) => setRef(scrollbar as any, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in timeList[item]\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartials[item]),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecrement\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncrement\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowControlTimeList[item]\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartials[item]),\n              ns.is('disabled', timeList[item][time!]),\n            ]\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, unref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { vRepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { getStyle } from '@element-plus/utils'\nimport { timeUnits } from '../constants'\nimport { buildTimeList } from '../utils'\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner'\nimport { getTimeLists } from '../composables/use-time-picker'\n\nimport type { Ref } from 'vue'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type { TimeUnit } from '../constants'\nimport type { TimeList } from '../utils'\n\nconst props = defineProps(basicTimeSpinnerProps)\nconst emit = defineEmits(['change', 'select-range', 'set-option'])\n\nconst ns = useNamespace('time')\n\nconst { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n  props.disabledHours,\n  props.disabledMinutes,\n  props.disabledSeconds\n)\n\n// data\nlet isScrolling = false\n\nconst currentScrollbar = ref<TimeUnit>()\nconst listHoursRef = ref<ScrollbarInstance>()\nconst listMinutesRef = ref<ScrollbarInstance>()\nconst listSecondsRef = ref<ScrollbarInstance>()\nconst listRefsMap: Record<TimeUnit, Ref<ScrollbarInstance | undefined>> = {\n  hours: listHoursRef,\n  minutes: listMinutesRef,\n  seconds: listSecondsRef,\n}\n\n// computed\nconst spinnerItems = computed(() => {\n  return props.showSeconds ? timeUnits : timeUnits.slice(0, 2)\n})\n\nconst timePartials = computed<Record<TimeUnit, number>>(() => {\n  const { spinnerDate } = props\n  const hours = spinnerDate.hour()\n  const minutes = spinnerDate.minute()\n  const seconds = spinnerDate.second()\n  return { hours, minutes, seconds }\n})\n\nconst timeList = computed(() => {\n  const { hours, minutes } = unref(timePartials)\n  return {\n    hours: getHoursList(props.role),\n    minutes: getMinutesList(hours, props.role),\n    seconds: getSecondsList(hours, minutes, props.role),\n  }\n})\n\nconst arrowControlTimeList = computed<Record<TimeUnit, TimeList>>(() => {\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  return {\n    hours: buildTimeList(hours, 23),\n    minutes: buildTimeList(minutes, 59),\n    seconds: buildTimeList(seconds, 59),\n  }\n})\n\nconst debouncedResetScroll = debounce((type) => {\n  isScrolling = false\n  adjustCurrentSpinner(type)\n}, 200)\n\nconst getAmPmFlag = (hour: number) => {\n  const shouldShowAmPm = !!props.amPmMode\n  if (!shouldShowAmPm) return ''\n  const isCapital = props.amPmMode === 'A'\n  // todo locale\n  let content = hour < 12 ? ' am' : ' pm'\n  if (isCapital) content = content.toUpperCase()\n  return content\n}\n\nconst emitSelectRange = (type: TimeUnit) => {\n  let range\n\n  switch (type) {\n    case 'hours':\n      range = [0, 2]\n      break\n    case 'minutes':\n      range = [3, 5]\n      break\n    case 'seconds':\n      range = [6, 8]\n      break\n  }\n  const [left, right] = range\n\n  emit('select-range', left, right)\n  currentScrollbar.value = type\n}\n\nconst adjustCurrentSpinner = (type: TimeUnit) => {\n  adjustSpinner(type, unref(timePartials)[type])\n}\n\nconst adjustSpinners = () => {\n  adjustCurrentSpinner('hours')\n  adjustCurrentSpinner('minutes')\n  adjustCurrentSpinner('seconds')\n}\n\nconst getScrollbarElement = (el: HTMLElement) =>\n  el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\nconst adjustSpinner = (type: TimeUnit, value: number) => {\n  if (props.arrowControl) return\n  const scrollbar = unref(listRefsMap[type])\n  if (scrollbar && scrollbar.$el) {\n    getScrollbarElement(scrollbar.$el).scrollTop = Math.max(\n      0,\n      value * typeItemHeight(type)\n    )\n  }\n}\n\nconst typeItemHeight = (type: TimeUnit): number => {\n  const scrollbar = unref(listRefsMap[type])\n  const listItem = scrollbar?.$el.querySelector('li')\n  if (listItem) {\n    return Number.parseFloat(getStyle(listItem, 'height')) || 0\n  }\n  return 0\n}\n\nconst onIncrement = () => {\n  scrollDown(1)\n}\n\nconst onDecrement = () => {\n  scrollDown(-1)\n}\n\nconst scrollDown = (step: number) => {\n  if (!currentScrollbar.value) {\n    emitSelectRange('hours')\n  }\n\n  const label = currentScrollbar.value!\n  const now = unref(timePartials)[label]\n  const total = currentScrollbar.value === 'hours' ? 24 : 60\n  const next = findNextUnDisabled(label, now, step, total)\n\n  modifyDateField(label, next)\n  adjustSpinner(label, next)\n  nextTick(() => emitSelectRange(label))\n}\n\nconst findNextUnDisabled = (\n  type: TimeUnit,\n  now: number,\n  step: number,\n  total: number\n) => {\n  let next = (now + step + total) % total\n  const list = unref(timeList)[type]\n  while (list[next] && next !== now) {\n    next = (next + step + total) % total\n  }\n  return next\n}\n\nconst modifyDateField = (type: TimeUnit, value: number) => {\n  const list = unref(timeList)[type]\n  const isDisabled = list[value]\n  if (isDisabled) return\n\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  let changeTo\n  switch (type) {\n    case 'hours':\n      changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds)\n      break\n    case 'minutes':\n      changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds)\n      break\n    case 'seconds':\n      changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value)\n      break\n  }\n  emit('change', changeTo)\n}\n\nconst handleClick = (\n  type: TimeUnit,\n  { value, disabled }: { value: number; disabled: boolean }\n) => {\n  if (!disabled) {\n    modifyDateField(type, value)\n    emitSelectRange(type)\n    adjustSpinner(type, value)\n  }\n}\n\nconst handleScroll = (type: TimeUnit) => {\n  isScrolling = true\n  debouncedResetScroll(type)\n  const value = Math.min(\n    Math.round(\n      (getScrollbarElement(unref(listRefsMap[type])!.$el).scrollTop -\n        (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n        3) /\n        typeItemHeight(type)\n    ),\n    type === 'hours' ? 23 : 59\n  )\n  modifyDateField(type, value)\n}\n\nconst scrollBarHeight = (type: TimeUnit) => {\n  return unref(listRefsMap[type])!.$el.offsetHeight\n}\n\nconst bindScrollEvent = () => {\n  const bindFunction = (type: TimeUnit) => {\n    const scrollbar = unref(listRefsMap[type])\n    if (scrollbar && scrollbar.$el) {\n      getScrollbarElement(scrollbar.$el).onscroll = () => {\n        // TODO: scroll is emitted when set scrollTop programmatically\n        // should find better solutions in the future!\n        handleScroll(type)\n      }\n    }\n  }\n  bindFunction('hours')\n  bindFunction('minutes')\n  bindFunction('seconds')\n}\n\nonMounted(() => {\n  nextTick(() => {\n    !props.arrowControl && bindScrollEvent()\n    adjustSpinners()\n    // set selection on the first hour part\n    if (props.role === 'start') emitSelectRange('hours')\n  })\n})\n\nconst setRef = (scrollbar: ScrollbarInstance, type: TimeUnit) => {\n  listRefsMap[type].value = scrollbar\n}\n\nemit('set-option', [`${props.role}_scrollDown`, scrollDown])\nemit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\nwatch(\n  () => props.spinnerDate,\n  () => {\n    if (isScrolling) return\n    adjustSpinners()\n  }\n)\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}