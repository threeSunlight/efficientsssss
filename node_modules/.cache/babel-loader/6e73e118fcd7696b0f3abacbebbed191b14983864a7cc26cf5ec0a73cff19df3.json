{"ast":null,"code":"var _excluded = [\"rightTableRef\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport { isVNode, createVNode, mergeProps } from 'vue';\nimport TableGrid from '../table-grid.mjs';\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\nvar LeftTable = function LeftTable(props, _ref) {\n  var slots = _ref.slots;\n  if (!props.columns.length) return;\n  var rightTableRef = props.rightTableRef,\n    rest = _objectWithoutProperties(props, _excluded);\n  return createVNode(TableGrid, mergeProps({\n    \"ref\": rightTableRef\n  }, rest), _isSlot(slots) ? slots : {\n    \"default\": function _default() {\n      return [slots];\n    }\n  });\n};\nexport { LeftTable as default };","map":{"version":3,"names":["props","columns","length","rightTableRef","rest","_objectWithoutProperties","_excluded","createVNode","TableGrid","mergeProps","_isSlot","slots","_default"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/right-table.tsx"],"sourcesContent":["import Table from '../table-grid'\n\nimport type { FunctionalComponent, Ref } from 'vue'\nimport type { TableV2GridProps } from '../grid'\nimport type { TableGridInstance } from '../table-grid'\n\ntype LeftTableProps = TableV2GridProps & {\n  rightTableRef: Ref<TableGridInstance | undefined>\n}\n\nconst LeftTable: FunctionalComponent<LeftTableProps> = (props, { slots }) => {\n  if (!props.columns.length) return\n\n  const { rightTableRef, ...rest } = props\n\n  return (\n    <Table ref={rightTableRef} {...rest}>\n      {slots}\n    </Table>\n  )\n}\n\nexport default LeftTable\n"],"mappings":";;;;;;;;gDAUM;EAAA,I;EAA2D,KAAAA,KAAA,CAAAC,OAAA,CAAAC,MAAA,EAAY;EAC3E,IAEMC,aAAA,GAAoBH,KAAA,CAApBG,aAAA;IAAAC,IAAA,GAAAC,wBAAA,CAAoBL,KAAA,EAAAM,SAAA;EAApB,OAANC,WAAA,CAAAC,SAAA,EAAAC,UAAA;IAEA,OAAAN;KACcC,IAAA,GAAAM,OAAA,CAAAC,KAAA,IAAAA,KAAA;IADd,oBAAAC,SAAA;MAAA,QAEKD,KAFL;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}