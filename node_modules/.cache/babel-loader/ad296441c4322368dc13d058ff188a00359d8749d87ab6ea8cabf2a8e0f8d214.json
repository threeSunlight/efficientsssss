{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { defineComponent, inject, unref, openBlock, createElementBlock, Fragment, createElementVNode, renderList, createBlock, createVNode } from 'vue';\nimport ElDescriptionsCell from './descriptions-cell.mjs';\nimport { descriptionsKey } from './token.mjs';\nimport { descriptionsRowProps } from './descriptions-row.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nvar _hoisted_1 = {\n  key: 1\n};\nvar __default__ = defineComponent({\n  name: \"ElDescriptionsRow\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: descriptionsRowProps,\n  setup: function setup(__props) {\n    var descriptions = inject(descriptionsKey, {});\n    return function (_ctx, _cache) {\n      return unref(descriptions).direction === \"vertical\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createElementVNode(\"tr\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.row, function (cell, index) {\n        return openBlock(), createBlock(unref(ElDescriptionsCell), {\n          key: \"tr1-\".concat(index),\n          cell: cell,\n          tag: \"th\",\n          type: \"label\"\n        }, null, 8, [\"cell\"]);\n      }), 128))]), createElementVNode(\"tr\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.row, function (cell, index) {\n        return openBlock(), createBlock(unref(ElDescriptionsCell), {\n          key: \"tr2-\".concat(index),\n          cell: cell,\n          tag: \"td\",\n          type: \"content\"\n        }, null, 8, [\"cell\"]);\n      }), 128))])], 64)) : (openBlock(), createElementBlock(\"tr\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.row, function (cell, index) {\n        return openBlock(), createElementBlock(Fragment, {\n          key: \"tr3-\".concat(index)\n        }, [unref(descriptions).border ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createVNode(unref(ElDescriptionsCell), {\n          cell: cell,\n          tag: \"td\",\n          type: \"label\"\n        }, null, 8, [\"cell\"]), createVNode(unref(ElDescriptionsCell), {\n          cell: cell,\n          tag: \"td\",\n          type: \"content\"\n        }, null, 8, [\"cell\"])], 64)) : (openBlock(), createBlock(unref(ElDescriptionsCell), {\n          key: 1,\n          cell: cell,\n          tag: \"td\",\n          type: \"both\"\n        }, null, 8, [\"cell\"]))], 64);\n      }), 128))]));\n    };\n  }\n}));\nvar ElDescriptionsRow = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/descriptions-row.vue\"]]);\nexport { ElDescriptionsRow as default };","map":{"version":3,"names":["name","descriptions","inject","descriptionsKey"],"sources":["../../../../../../packages/components/descriptions/src/descriptions-row.vue"],"sourcesContent":["<template>\n  <template v-if=\"descriptions.direction === 'vertical'\">\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr1-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"th\" type=\"label\" />\n      </template>\n    </tr>\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr2-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n    </tr>\n  </template>\n  <tr v-else>\n    <template v-for=\"(cell, index) in row\" :key=\"`tr3-${index}`\">\n      <template v-if=\"descriptions.border\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"label\" />\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n      <el-descriptions-cell v-else :cell=\"cell\" tag=\"td\" type=\"both\" />\n    </template>\n  </tr>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport { inject } from 'vue'\n\nimport ElDescriptionsCell from './descriptions-cell'\nimport { descriptionsKey } from './token'\nimport { descriptionsRowProps } from './descriptions-row'\n\nimport type { IDescriptionsInject } from './descriptions.type'\n\ndefineOptions({\n  name: 'ElDescriptionsRow',\n})\n\ndefineProps(descriptionsRowProps)\n\nconst descriptions = inject(descriptionsKey, {} as IDescriptionsInject)\n</script>\n"],"mappings":";;;;;;;;;;;;;;iCAkCc;EACZA,IAAM;AACR;;;;IAIA,IAAMC,YAAe,GAAAC,MAAA,CAAOC,eAAiB,IAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}