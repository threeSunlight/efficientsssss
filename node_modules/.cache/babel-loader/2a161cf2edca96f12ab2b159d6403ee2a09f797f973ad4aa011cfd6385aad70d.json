{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { defineComponent, ref, reactive, computed, nextTick, onMounted, watch, provide, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown, Close } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './utils/color.mjs';\nimport { colorPickerProps, colorPickerEmits, colorPickerContextKey } from './color-picker.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nvar _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"tabindex\", \"onKeydown\"];\nvar __default__ = defineComponent({\n  name: \"ElColorPicker\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: colorPickerProps,\n  emits: colorPickerEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n      emit = _ref.emit;\n    var props = __props;\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var ns = useNamespace(\"color\");\n    var _useFormItem = useFormItem(),\n      formItem = _useFormItem.formItem;\n    var colorSize = useFormSize();\n    var colorDisabled = useFormDisabled();\n    var _useFormItemInputId = useFormItemInputId(props, {\n        formItemContext: formItem\n      }),\n      buttonId = _useFormItemInputId.inputId,\n      isLabeledByFormItem = _useFormItemInputId.isLabeledByFormItem;\n    var hue = ref();\n    var sv = ref();\n    var alpha = ref();\n    var popper = ref();\n    var shouldActiveChange = true;\n    var color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    var showPicker = ref(false);\n    var showPanelColor = ref(false);\n    var customInput = ref(\"\");\n    var displayedColor = computed(function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color, props.showAlpha);\n    });\n    var currentColor = computed(function () {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    var buttonAriaLabel = computed(function () {\n      return !isLabeledByFormItem.value ? props.label || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    var buttonAriaLabelledby = computed(function () {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n    var btnKls = computed(function () {\n      return [ns.b(\"picker\"), ns.is(\"disabled\", colorDisabled.value), ns.bm(\"picker\", colorSize.value)];\n    });\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n      var _color2$toRgb = color2.toRgb(),\n        r = _color2$toRgb.r,\n        g = _color2$toRgb.g,\n        b = _color2$toRgb.b;\n      return showAlpha ? \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(color2.get(\"alpha\") / 100, \")\") : \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    var debounceSetShowPicker = debounce(setShowPicker, 100);\n    function show() {\n      if (colorDisabled.value) return;\n      setShowPicker(true);\n    }\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      nextTick(function () {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          color.value = \"\";\n          nextTick(function () {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n    function confirmValue() {\n      var value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n      debounceSetShowPicker(false);\n      nextTick(function () {\n        var newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n      resetColor();\n    }\n    onMounted(function () {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function (newVal) {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        shouldActiveChange = false;\n        color.fromString(newVal);\n      }\n    });\n    watch(function () {\n      return currentColor.value;\n    }, function (val) {\n      customInput.value = val;\n      shouldActiveChange && emit(\"activeChange\", val);\n      shouldActiveChange = true;\n    });\n    watch(function () {\n      return color.value;\n    }, function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    watch(function () {\n      return showPicker.value;\n    }, function () {\n      nextTick(function () {\n        var _a, _b, _c;\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = sv.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(colorPickerContextKey, {\n      currentColor: currentColor\n    });\n    expose({\n      color: color,\n      show: show,\n      hide: hide\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popper\",\n        ref: popper,\n        visible: showPicker.value,\n        \"show-arrow\": false,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        offset: 0,\n        \"gpu-acceleration\": false,\n        \"popper-class\": [unref(ns).be(\"picker\", \"panel\"), unref(ns).b(\"dropdown\"), _ctx.popperClass],\n        \"stop-popper-mouse-event\": false,\n        effect: \"light\",\n        trigger: \"click\",\n        transition: \"\".concat(unref(ns).namespace.value, \"-zoom-in-top\"),\n        persistent: \"\"\n      }, {\n        content: withCtx(function () {\n          return [withDirectives((openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"div\", {\n            \"class\": normalizeClass(unref(ns).be(\"dropdown\", \"main-wrapper\"))\n          }, [createVNode(HueSlider, {\n            ref_key: \"hue\",\n            ref: hue,\n            \"class\": \"hue-slider\",\n            color: unref(color),\n            vertical: \"\"\n          }, null, 8, [\"color\"]), createVNode(SvPanel, {\n            ref: \"svPanel\",\n            color: unref(color)\n          }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(AlphaSlider, {\n            key: 0,\n            ref_key: \"alpha\",\n            ref: alpha,\n            color: unref(color)\n          }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(Predefine, {\n            key: 1,\n            ref: \"predefine\",\n            color: unref(color),\n            colors: _ctx.predefine\n          }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n            \"class\": normalizeClass(unref(ns).be(\"dropdown\", \"btns\"))\n          }, [createElementVNode(\"span\", {\n            \"class\": normalizeClass(unref(ns).be(\"dropdown\", \"value\"))\n          }, [createVNode(unref(ElInput), {\n            modelValue: customInput.value,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n              return customInput.value = $event;\n            }),\n            \"validate-event\": false,\n            size: \"small\",\n            onKeyup: withKeys(handleConfirm, [\"enter\"]),\n            onBlur: handleConfirm\n          }, null, 8, [\"modelValue\", \"onKeyup\"])], 2), createVNode(unref(ElButton), {\n            \"class\": normalizeClass(unref(ns).be(\"dropdown\", \"link-btn\")),\n            text: \"\",\n            size: \"small\",\n            onClick: clear\n          }, {\n            \"default\": withCtx(function () {\n              return [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.clear\")), 1)];\n            }),\n            _: 1\n          }, 8, [\"class\"]), createVNode(unref(ElButton), {\n            plain: \"\",\n            size: \"small\",\n            \"class\": normalizeClass(unref(ns).be(\"dropdown\", \"btn\")),\n            onClick: confirmValue\n          }, {\n            \"default\": withCtx(function () {\n              return [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.confirm\")), 1)];\n            }),\n            _: 1\n          }, 8, [\"class\"])], 2)])), [[unref(ClickOutside), hide]])];\n        }),\n        \"default\": withCtx(function () {\n          return [createElementVNode(\"div\", {\n            id: unref(buttonId),\n            \"class\": normalizeClass(unref(btnKls)),\n            role: \"button\",\n            \"aria-label\": unref(buttonAriaLabel),\n            \"aria-labelledby\": unref(buttonAriaLabelledby),\n            \"aria-description\": unref(t)(\"el.colorpicker.description\", {\n              color: _ctx.modelValue || \"\"\n            }),\n            tabindex: _ctx.tabindex,\n            onKeydown: withKeys(handleTrigger, [\"enter\"])\n          }, [unref(colorDisabled) ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            \"class\": normalizeClass(unref(ns).be(\"picker\", \"mask\"))\n          }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n            \"class\": normalizeClass(unref(ns).be(\"picker\", \"trigger\")),\n            onClick: handleTrigger\n          }, [createElementVNode(\"span\", {\n            \"class\": normalizeClass([unref(ns).be(\"picker\", \"color\"), unref(ns).is(\"alpha\", _ctx.showAlpha)])\n          }, [createElementVNode(\"span\", {\n            \"class\": normalizeClass(unref(ns).be(\"picker\", \"color-inner\")),\n            style: normalizeStyle({\n              backgroundColor: unref(displayedColor)\n            })\n          }, [withDirectives(createVNode(unref(ElIcon), {\n            \"class\": normalizeClass([unref(ns).be(\"picker\", \"icon\"), unref(ns).is(\"icon-arrow-down\")])\n          }, {\n            \"default\": withCtx(function () {\n              return [createVNode(unref(ArrowDown))];\n            }),\n            _: 1\n          }, 8, [\"class\"]), [[vShow, _ctx.modelValue || showPanelColor.value]]), !_ctx.modelValue && !showPanelColor.value ? (openBlock(), createBlock(unref(ElIcon), {\n            key: 0,\n            \"class\": normalizeClass([unref(ns).be(\"picker\", \"empty\"), unref(ns).is(\"icon-close\")])\n          }, {\n            \"default\": withCtx(function () {\n              return [createVNode(unref(Close))];\n            }),\n            _: 1\n          }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 42, _hoisted_1)];\n        }),\n        _: 1\n      }, 8, [\"visible\", \"popper-class\", \"transition\"]);\n    };\n  }\n}));\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/color-picker.vue\"]]);\nexport { ColorPicker as default };","map":{"version":3,"names":["name","_useLocale","useLocale","t","ns","useNamespace","_useFormItem","useFormItem","formItem","colorSize","useFormSize","colorDisabled","useFormDisabled","_useFormItemInputId","useFormItemInputId","props","formItemContext","buttonId","inputId","isLabeledByFormItem","hue","ref","sv","alpha","popper","shouldActiveChange","color","reactive","Color","enableAlpha","showAlpha","format","colorFormat","value","modelValue","showPicker","showPanelColor","customInput","displayedColor","computed","displayedRgb","currentColor","buttonAriaLabel","label","buttonAriaLabelledby","labelId","btnKls","b","is","bm","color2","TypeError","_color2$toRgb","toRgb","r","g","concat","get","setShowPicker","debounceSetShowPicker","debounce","show","hide","resetColor","nextTick","fromString","handleTrigger","handleConfirm","confirmValue","emit","UPDATE_MODEL_EVENT","validateEvent","validate","err","debugWarn","newColor","compare","clear","onMounted","watch","newVal","val","_a","_b","_c","update","provide","colorPickerContextKey","expose"],"sources":["../../../../../../packages/components/color-picker/src/color-picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    :visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n  >\n    <template #content>\n      <div v-click-outside=\"hide\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            text\n            size=\"small\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :id=\"buttonId\"\n        :class=\"btnKls\"\n        role=\"button\"\n        :aria-label=\"buttonAriaLabel\"\n        :aria-labelledby=\"buttonAriaLabelledby\"\n        :aria-description=\"\n          t('el.colorpicker.description', { color: modelValue || '' })\n        \"\n        :tabindex=\"tabindex\"\n        @keydown.enter=\"handleTrigger\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\" />\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-if=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { ElButton } from '@element-plus/components/button'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ClickOutside as vClickOutside } from '@element-plus/directives'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { ElInput } from '@element-plus/components/input'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { ArrowDown, Close } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './utils/color'\nimport {\n  colorPickerContextKey,\n  colorPickerEmits,\n  colorPickerProps,\n} from './color-picker'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\ndefineOptions({\n  name: 'ElColorPicker',\n})\nconst props = defineProps(colorPickerProps)\nconst emit = defineEmits(colorPickerEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('color')\nconst { formItem } = useFormItem()\nconst colorSize = useFormSize()\nconst colorDisabled = useFormDisabled()\n\nconst { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst hue = ref<InstanceType<typeof HueSlider>>()\nconst sv = ref<InstanceType<typeof SvPanel>>()\nconst alpha = ref<InstanceType<typeof AlphaSlider>>()\nconst popper = ref<TooltipInstance>()\n\n// active-change is used to prevent modelValue changes from triggering.\nlet shouldActiveChange = true\n\nconst color = reactive(\n  new Color({\n    enableAlpha: props.showAlpha,\n    format: props.colorFormat || '',\n    value: props.modelValue,\n  })\n) as Color\n\nconst showPicker = ref(false)\nconst showPanelColor = ref(false)\nconst customInput = ref('')\n\nconst displayedColor = computed(() => {\n  if (!props.modelValue && !showPanelColor.value) {\n    return 'transparent'\n  }\n  return displayedRgb(color, props.showAlpha)\n})\n\nconst currentColor = computed(() => {\n  return !props.modelValue && !showPanelColor.value ? '' : color.value\n})\n\nconst buttonAriaLabel = computed<string | undefined>(() => {\n  return !isLabeledByFormItem.value\n    ? props.label || t('el.colorpicker.defaultLabel')\n    : undefined\n})\n\nconst buttonAriaLabelledby = computed<string | undefined>(() => {\n  return isLabeledByFormItem.value ? formItem?.labelId : undefined\n})\n\nconst btnKls = computed(() => {\n  return [\n    ns.b('picker'),\n    ns.is('disabled', colorDisabled.value),\n    ns.bm('picker', colorSize.value),\n  ]\n})\n\nfunction displayedRgb(color: Color, showAlpha: boolean) {\n  if (!(color instanceof Color)) {\n    throw new TypeError('color should be instance of _color Class')\n  }\n\n  const { r, g, b } = color.toRgb()\n  return showAlpha\n    ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n    : `rgb(${r}, ${g}, ${b})`\n}\n\nfunction setShowPicker(value: boolean) {\n  showPicker.value = value\n}\n\nconst debounceSetShowPicker = debounce(setShowPicker, 100)\n\nfunction show() {\n  if (colorDisabled.value) return\n  setShowPicker(true)\n}\n\nfunction hide() {\n  debounceSetShowPicker(false)\n  resetColor()\n}\n\nfunction resetColor() {\n  nextTick(() => {\n    if (props.modelValue) {\n      color.fromString(props.modelValue)\n    } else {\n      color.value = ''\n      nextTick(() => {\n        showPanelColor.value = false\n      })\n    }\n  })\n}\n\nfunction handleTrigger() {\n  if (colorDisabled.value) return\n  debounceSetShowPicker(!showPicker.value)\n}\n\nfunction handleConfirm() {\n  color.fromString(customInput.value)\n}\n\nfunction confirmValue() {\n  const value = color.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('change', value)\n  if (props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  debounceSetShowPicker(false)\n  // check if modelValue change, if not change, then reset color.\n  nextTick(() => {\n    const newColor = new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || '',\n      value: props.modelValue,\n    })\n    if (!color.compare(newColor)) {\n      resetColor()\n    }\n  })\n}\n\nfunction clear() {\n  debounceSetShowPicker(false)\n  emit(UPDATE_MODEL_EVENT, null)\n  emit('change', null)\n  if (props.modelValue !== null && props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  resetColor()\n}\n\nonMounted(() => {\n  if (props.modelValue) {\n    customInput.value = currentColor.value\n  }\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (!newVal) {\n      showPanelColor.value = false\n    } else if (newVal && newVal !== color.value) {\n      shouldActiveChange = false\n      color.fromString(newVal)\n    }\n  }\n)\n\nwatch(\n  () => currentColor.value,\n  (val) => {\n    customInput.value = val\n    shouldActiveChange && emit('activeChange', val)\n    shouldActiveChange = true\n  }\n)\n\nwatch(\n  () => color.value,\n  () => {\n    if (!props.modelValue && !showPanelColor.value) {\n      showPanelColor.value = true\n    }\n  }\n)\n\nwatch(\n  () => showPicker.value,\n  () => {\n    nextTick(() => {\n      hue.value?.update()\n      sv.value?.update()\n      alpha.value?.update()\n    })\n  }\n)\n\nprovide(colorPickerContextKey, {\n  currentColor,\n})\n\ndefineExpose({\n  /**\n   * @description current color object\n   */\n  color,\n  /**\n   * @description manually show ColorPicker\n   */\n  show,\n  /**\n   * @description manually hide ColorPicker\n   */\n  hide,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}