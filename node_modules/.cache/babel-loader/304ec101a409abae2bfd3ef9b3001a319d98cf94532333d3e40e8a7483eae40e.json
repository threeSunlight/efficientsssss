{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport '../../../../utils/index.mjs';\nimport Node from './node.mjs';\nimport { getNodeKey } from './util.mjs';\nimport { hasOwn, isObject } from '@vue/shared';\nvar TreeStore = /*#__PURE__*/function () {\n  function TreeStore(options) {\n    _classCallCheck(this, TreeStore);\n    this.currentNode = null;\n    this.currentNodeKey = null;\n    for (var option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n    this.nodesMap = {};\n  }\n  _createClass(TreeStore, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n      this.root = new Node({\n        data: this.data,\n        store: this\n      });\n      this.root.initialize();\n      if (this.lazy && this.load) {\n        var loadFn = this.load;\n        loadFn(this.root, function (data) {\n          _this.root.doCreateChildren(data);\n          _this._initDefaultCheckedNodes();\n        });\n      } else {\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      var filterNodeMethod = this.filterNodeMethod;\n      var lazy = this.lazy;\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          child.visible = filterNodeMethod.call(child, value, child.data, child);\n          traverse(child);\n        });\n        if (!node.visible && childNodes.length) {\n          var allHidden = true;\n          allHidden = !childNodes.some(function (child) {\n            return child.visible;\n          });\n          if (node.root) {\n            ;\n            node.root.visible = allHidden === false;\n          } else {\n            ;\n            node.visible = allHidden === false;\n          }\n        }\n        if (!value) return;\n        if (node.visible && !node.isLeaf && !lazy) node.expand();\n      };\n      traverse(this);\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newVal) {\n      var instanceChanged = newVal !== this.root.data;\n      if (instanceChanged) {\n        this.root.setData(newVal);\n        this._initDefaultCheckedNodes();\n      } else {\n        this.root.updateChildren();\n      }\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(data) {\n      if (data instanceof Node) return data;\n      var key = isObject(data) ? getNodeKey(this.key, data) : data;\n      return this.nodesMap[key] || null;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertBefore({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertAfter({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(data) {\n      var node = this.getNode(data);\n      if (node && node.parent) {\n        if (node === this.currentNode) {\n          this.currentNode = null;\n        }\n        node.parent.removeChild(node);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(data, parentData) {\n      var parentNode = parentData ? this.getNode(parentData) : this.root;\n      if (parentNode) {\n        parentNode.insertChild({\n          data: data\n        });\n      }\n    }\n  }, {\n    key: \"_initDefaultCheckedNodes\",\n    value: function _initDefaultCheckedNodes() {\n      var _this2 = this;\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n      var nodesMap = this.nodesMap;\n      defaultCheckedKeys.forEach(function (checkedKey) {\n        var node = nodesMap[checkedKey];\n        if (node) {\n          node.setChecked(true, !_this2.checkStrictly);\n        }\n      });\n    }\n  }, {\n    key: \"_initDefaultCheckedNode\",\n    value: function _initDefaultCheckedNode(node) {\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n      if (defaultCheckedKeys.includes(node.key)) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    }\n  }, {\n    key: \"setDefaultCheckedKey\",\n    value: function setDefaultCheckedKey(newVal) {\n      if (newVal !== this.defaultCheckedKeys) {\n        this.defaultCheckedKeys = newVal;\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: \"registerNode\",\n    value: function registerNode(node) {\n      var key = this.key;\n      if (!node || !node.data) return;\n      if (!key) {\n        this.nodesMap[node.id] = node;\n      } else {\n        var nodeKey = node.key;\n        if (nodeKey !== void 0) this.nodesMap[node.key] = node;\n      }\n    }\n  }, {\n    key: \"deregisterNode\",\n    value: function deregisterNode(node) {\n      var _this3 = this;\n      var key = this.key;\n      if (!key || !node || !node.data) return;\n      node.childNodes.forEach(function (child) {\n        _this3.deregisterNode(child);\n      });\n      delete this.nodesMap[node.key];\n    }\n  }, {\n    key: \"getCheckedNodes\",\n    value: function getCheckedNodes() {\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var includeHalfChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var checkedNodes = [];\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {\n            checkedNodes.push(child.data);\n          }\n          traverse(child);\n        });\n      };\n      traverse(this);\n      return checkedNodes;\n    }\n  }, {\n    key: \"getCheckedKeys\",\n    value: function getCheckedKeys() {\n      var _this4 = this;\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this.getCheckedNodes(leafOnly).map(function (data) {\n        return (data || {})[_this4.key];\n      });\n    }\n  }, {\n    key: \"getHalfCheckedNodes\",\n    value: function getHalfCheckedNodes() {\n      var nodes = [];\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          if (child.indeterminate) {\n            nodes.push(child.data);\n          }\n          traverse(child);\n        });\n      };\n      traverse(this);\n      return nodes;\n    }\n  }, {\n    key: \"getHalfCheckedKeys\",\n    value: function getHalfCheckedKeys() {\n      var _this5 = this;\n      return this.getHalfCheckedNodes().map(function (data) {\n        return (data || {})[_this5.key];\n      });\n    }\n  }, {\n    key: \"_getAllNodes\",\n    value: function _getAllNodes() {\n      var allNodes = [];\n      var nodesMap = this.nodesMap;\n      for (var nodeKey in nodesMap) {\n        if (hasOwn(nodesMap, nodeKey)) {\n          allNodes.push(nodesMap[nodeKey]);\n        }\n      }\n      return allNodes;\n    }\n  }, {\n    key: \"updateChildren\",\n    value: function updateChildren(key, data) {\n      var node = this.nodesMap[key];\n      if (!node) return;\n      var childNodes = node.childNodes;\n      for (var i = childNodes.length - 1; i >= 0; i--) {\n        var child = childNodes[i];\n        this.remove(child.data);\n      }\n      for (var _i = 0, j = data.length; _i < j; _i++) {\n        var _child = data[_i];\n        this.append(_child, node.data);\n      }\n    }\n  }, {\n    key: \"_setCheckedKeys\",\n    value: function _setCheckedKeys(key) {\n      var _this6 = this;\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var checkedKeys = arguments.length > 2 ? arguments[2] : undefined;\n      var allNodes = this._getAllNodes().sort(function (a, b) {\n        return b.level - a.level;\n      });\n      var cache = /* @__PURE__ */Object.create(null);\n      var keys = Object.keys(checkedKeys);\n      allNodes.forEach(function (node) {\n        return node.setChecked(false, false);\n      });\n      var _loop = function _loop() {\n        var node = allNodes[i];\n        var nodeKey = node.data[key].toString();\n        var checked = keys.includes(nodeKey);\n        if (!checked) {\n          if (node.checked && !cache[nodeKey]) {\n            node.setChecked(false, false);\n          }\n          return \"continue\";\n        }\n        var parent = node.parent;\n        while (parent && parent.level > 0) {\n          cache[parent.data[key]] = true;\n          parent = parent.parent;\n        }\n        if (node.isLeaf || _this6.checkStrictly) {\n          node.setChecked(true, false);\n          return \"continue\";\n        }\n        node.setChecked(true, true);\n        if (leafOnly) {\n          node.setChecked(false, false);\n          var traverse = function traverse(node2) {\n            var childNodes = node2.childNodes;\n            childNodes.forEach(function (child) {\n              if (!child.isLeaf) {\n                child.setChecked(false, false);\n              }\n              traverse(child);\n            });\n          };\n          traverse(node);\n        }\n      };\n      for (var i = 0, j = allNodes.length; i < j; i++) {\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n      }\n    }\n  }, {\n    key: \"setCheckedNodes\",\n    value: function setCheckedNodes(array) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var key = this.key;\n      var checkedKeys = {};\n      array.forEach(function (item) {\n        checkedKeys[(item || {})[key]] = true;\n      });\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: \"setCheckedKeys\",\n    value: function setCheckedKeys(keys) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.defaultCheckedKeys = keys;\n      var key = this.key;\n      var checkedKeys = {};\n      keys.forEach(function (key2) {\n        checkedKeys[key2] = true;\n      });\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: \"setDefaultExpandedKeys\",\n    value: function setDefaultExpandedKeys(keys) {\n      var _this7 = this;\n      keys = keys || [];\n      this.defaultExpandedKeys = keys;\n      keys.forEach(function (key) {\n        var node = _this7.getNode(key);\n        if (node) node.expand(null, _this7.autoExpandParent);\n      });\n    }\n  }, {\n    key: \"setChecked\",\n    value: function setChecked(data, checked, deep) {\n      var node = this.getNode(data);\n      if (node) {\n        node.setChecked(!!checked, deep);\n      }\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.currentNode;\n    }\n  }, {\n    key: \"setCurrentNode\",\n    value: function setCurrentNode(currentNode) {\n      var prevCurrentNode = this.currentNode;\n      if (prevCurrentNode) {\n        prevCurrentNode.isCurrent = false;\n      }\n      this.currentNode = currentNode;\n      this.currentNode.isCurrent = true;\n    }\n  }, {\n    key: \"setUserCurrentNode\",\n    value: function setUserCurrentNode(node) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var key = node[this.key];\n      var currNode = this.nodesMap[key];\n      this.setCurrentNode(currNode);\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true);\n      }\n    }\n  }, {\n    key: \"setCurrentNodeKey\",\n    value: function setCurrentNodeKey(key) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (key === null || key === void 0) {\n        this.currentNode && (this.currentNode.isCurrent = false);\n        this.currentNode = null;\n        return;\n      }\n      var node = this.getNode(key);\n      if (node) {\n        this.setCurrentNode(node);\n        if (shouldAutoExpandParent && this.currentNode.level > 1) {\n          this.currentNode.parent.expand(null, true);\n        }\n      }\n    }\n  }]);\n  return TreeStore;\n}();\nexport { TreeStore as default };","map":{"version":3,"names":["TreeStore","options","_classCallCheck","currentNode","currentNodeKey","option","hasOwn","nodesMap","_createClass","key","value","initialize","_this","root","Node","data","store","lazy","load","loadFn","doCreateChildren","_initDefaultCheckedNodes","filter","filterNodeMethod","traverse","node","childNodes","forEach","child","visible","call","length","allHidden","some","isLeaf","expand","setData","newVal","instanceChanged","updateChildren","getNode","isObject","getNodeKey","insertBefore","refData","refNode","parent","insertAfter","remove","removeChild","append","parentData","parentNode","insertChild","_this2","defaultCheckedKeys","checkedKey","setChecked","checkStrictly","_initDefaultCheckedNode","includes","setDefaultCheckedKey","registerNode","id","nodeKey","deregisterNode","_this3","getCheckedNodes","leafOnly","arguments","undefined","includeHalfChecked","checkedNodes","checked","indeterminate","push","getCheckedKeys","_this4","map","getHalfCheckedNodes","nodes","getHalfCheckedKeys","_this5","_getAllNodes","allNodes","i","j","_setCheckedKeys","_this6","checkedKeys","sort","a","b","level","cache","Object","create","keys","_loop","toString","node2","_ret","setCheckedNodes","array","item","setCheckedKeys","key2","setDefaultExpandedKeys","_this7","defaultExpandedKeys","autoExpandParent","deep","getCurrentNode","setCurrentNode","prevCurrentNode","isCurrent","setUserCurrentNode","shouldAutoExpandParent","currNode","setCurrentNodeKey"],"sources":["../../../../../../../packages/components/tree/src/model/tree-store.ts"],"sourcesContent":["// @ts-nocheck\nimport { hasOwn, isObject } from '@element-plus/utils'\nimport Node from './node'\nimport { getNodeKey } from './util'\n\nimport type {\n  FilterNodeMethodFunction,\n  FilterValue,\n  LoadFunction,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n  TreeOptionProps,\n  TreeStoreNodesMap,\n  TreeStoreOptions,\n} from '../tree.type'\n\nexport default class TreeStore {\n  currentNode: Node\n  currentNodeKey: TreeKey\n  nodesMap: TreeStoreNodesMap\n  root: Node\n  data: TreeData\n  lazy: boolean\n  load: LoadFunction\n  filterNodeMethod: FilterNodeMethodFunction\n  key: TreeKey\n  defaultCheckedKeys: TreeKey[]\n  checkStrictly: boolean\n  defaultExpandedKeys: TreeKey[]\n  autoExpandParent: boolean\n  defaultExpandAll: boolean\n  checkDescendants: boolean\n  props: TreeOptionProps\n\n  constructor(options: TreeStoreOptions) {\n    this.currentNode = null\n    this.currentNodeKey = null\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option]\n      }\n    }\n\n    this.nodesMap = {}\n  }\n\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this,\n    })\n    this.root.initialize()\n\n    if (this.lazy && this.load) {\n      const loadFn = this.load\n      loadFn(this.root, (data) => {\n        this.root.doCreateChildren(data)\n        this._initDefaultCheckedNodes()\n      })\n    } else {\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  filter(value: FilterValue): void {\n    const filterNodeMethod = this.filterNodeMethod\n    const lazy = this.lazy\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child)\n\n        traverse(child)\n      })\n\n      if (!(node as Node).visible && childNodes.length) {\n        let allHidden = true\n        allHidden = !childNodes.some((child) => child.visible)\n\n        if ((node as TreeStore).root) {\n          ;(node as TreeStore).root.visible = allHidden === false\n        } else {\n          ;(node as Node).visible = allHidden === false\n        }\n      }\n      if (!value) return\n\n      if ((node as Node).visible && !(node as Node).isLeaf && !lazy)\n        (node as Node).expand()\n    }\n\n    traverse(this)\n  }\n\n  setData(newVal: TreeData): void {\n    const instanceChanged = newVal !== this.root.data\n    if (instanceChanged) {\n      this.root.setData(newVal)\n      this._initDefaultCheckedNodes()\n    } else {\n      this.root.updateChildren()\n    }\n  }\n\n  getNode(data: TreeKey | TreeNodeData | Node): Node {\n    if (data instanceof Node) return data\n    const key = isObject(data) ? getNodeKey(this.key, data) : data\n    return this.nodesMap[key] || null\n  }\n\n  insertBefore(\n    data: TreeNodeData,\n    refData: TreeKey | TreeNodeData | Node\n  ): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertBefore({ data }, refNode)\n  }\n\n  insertAfter(\n    data: TreeNodeData,\n    refData: TreeKey | TreeNodeData | Node\n  ): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertAfter({ data }, refNode)\n  }\n\n  remove(data: TreeNodeData | Node): void {\n    const node = this.getNode(data)\n\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null\n      }\n      node.parent.removeChild(node)\n    }\n  }\n\n  append(data: TreeNodeData, parentData: TreeNodeData | TreeKey | Node): void {\n    const parentNode = parentData ? this.getNode(parentData) : this.root\n\n    if (parentNode) {\n      parentNode.insertChild({ data })\n    }\n  }\n\n  _initDefaultCheckedNodes(): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n    const nodesMap = this.nodesMap\n\n    defaultCheckedKeys.forEach((checkedKey) => {\n      const node = nodesMap[checkedKey]\n\n      if (node) {\n        node.setChecked(true, !this.checkStrictly)\n      }\n    })\n  }\n\n  _initDefaultCheckedNode(node: Node): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n\n    if (defaultCheckedKeys.includes(node.key)) {\n      node.setChecked(true, !this.checkStrictly)\n    }\n  }\n\n  setDefaultCheckedKey(newVal: TreeKey[]): void {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  registerNode(node: Node): void {\n    const key = this.key\n    if (!node || !node.data) return\n\n    if (!key) {\n      this.nodesMap[node.id] = node\n    } else {\n      const nodeKey = node.key\n      if (nodeKey !== undefined) this.nodesMap[node.key] = node\n    }\n  }\n\n  deregisterNode(node: Node): void {\n    const key = this.key\n    if (!key || !node || !node.data) return\n\n    node.childNodes.forEach((child) => {\n      this.deregisterNode(child)\n    })\n\n    delete this.nodesMap[node.key]\n  }\n\n  getCheckedNodes(\n    leafOnly = false,\n    includeHalfChecked = false\n  ): TreeNodeData[] {\n    const checkedNodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (\n          (child.checked || (includeHalfChecked && child.indeterminate)) &&\n          (!leafOnly || (leafOnly && child.isLeaf))\n        ) {\n          checkedNodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return checkedNodes\n  }\n\n  getCheckedKeys(leafOnly = false): TreeKey[] {\n    return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key])\n  }\n\n  getHalfCheckedNodes(): TreeNodeData[] {\n    const nodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (child.indeterminate) {\n          nodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return nodes\n  }\n\n  getHalfCheckedKeys(): TreeKey[] {\n    return this.getHalfCheckedNodes().map((data) => (data || {})[this.key])\n  }\n\n  _getAllNodes(): Node[] {\n    const allNodes: Node[] = []\n    const nodesMap = this.nodesMap\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey])\n      }\n    }\n\n    return allNodes\n  }\n\n  updateChildren(key: TreeKey, data: TreeData): void {\n    const node = this.nodesMap[key]\n    if (!node) return\n    const childNodes = node.childNodes\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i]\n      this.remove(child.data)\n    }\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i]\n      this.append(child, node.data)\n    }\n  }\n\n  _setCheckedKeys(\n    key: TreeKey,\n    leafOnly = false,\n    checkedKeys: { [key: string]: boolean }\n  ): void {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level)\n    const cache = Object.create(null)\n    const keys = Object.keys(checkedKeys)\n    allNodes.forEach((node) => node.setChecked(false, false))\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i]\n      const nodeKey = node.data[key].toString()\n      const checked = keys.includes(nodeKey)\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false)\n        }\n        continue\n      }\n\n      let parent = node.parent\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true\n        parent = parent.parent\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false)\n        continue\n      }\n      node.setChecked(true, true)\n\n      if (leafOnly) {\n        node.setChecked(false, false)\n        const traverse = function (node: Node): void {\n          const childNodes = node.childNodes\n          childNodes.forEach((child) => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false)\n            }\n            traverse(child)\n          })\n        }\n        traverse(node)\n      }\n    }\n  }\n\n  setCheckedNodes(array: Node[], leafOnly = false): void {\n    const key = this.key\n    const checkedKeys = {}\n    array.forEach((item) => {\n      checkedKeys[(item || {})[key]] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setCheckedKeys(keys: TreeKey[], leafOnly = false): void {\n    this.defaultCheckedKeys = keys\n    const key = this.key\n    const checkedKeys = {}\n    keys.forEach((key) => {\n      checkedKeys[key] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setDefaultExpandedKeys(keys: TreeKey[]) {\n    keys = keys || []\n    this.defaultExpandedKeys = keys\n    keys.forEach((key) => {\n      const node = this.getNode(key)\n      if (node) node.expand(null, this.autoExpandParent)\n    })\n  }\n\n  setChecked(\n    data: TreeKey | TreeNodeData,\n    checked: boolean,\n    deep: boolean\n  ): void {\n    const node = this.getNode(data)\n\n    if (node) {\n      node.setChecked(!!checked, deep)\n    }\n  }\n\n  getCurrentNode(): Node {\n    return this.currentNode\n  }\n\n  setCurrentNode(currentNode: Node): void {\n    const prevCurrentNode = this.currentNode\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false\n    }\n    this.currentNode = currentNode\n    this.currentNode.isCurrent = true\n  }\n\n  setUserCurrentNode(node: Node, shouldAutoExpandParent = true): void {\n    const key = node[this.key]\n    const currNode = this.nodesMap[key]\n    this.setCurrentNode(currNode)\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true)\n    }\n  }\n\n  setCurrentNodeKey(key?: TreeKey, shouldAutoExpandParent = true): void {\n    if (key === null || key === undefined) {\n      this.currentNode && (this.currentNode.isCurrent = false)\n      this.currentNode = null\n      return\n    }\n    const node = this.getNode(key)\n    if (node) {\n      this.setCurrentNode(node)\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true)\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}