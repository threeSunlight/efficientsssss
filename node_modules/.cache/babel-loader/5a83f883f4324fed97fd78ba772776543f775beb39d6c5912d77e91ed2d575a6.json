{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { ref, computed, unref, watch } from 'vue';\nvar useData = function useData(props, _ref) {\n  var expandedRowKeys = _ref.expandedRowKeys,\n    lastRenderedRowIndex = _ref.lastRenderedRowIndex,\n    resetAfterIndex = _ref.resetAfterIndex;\n  var depthMap = ref({});\n  var flattenedData = computed(function () {\n    var depths = {};\n    var data2 = props.data,\n      rowKey = props.rowKey;\n    var _expandedRowKeys = unref(expandedRowKeys);\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data2;\n    var array = [];\n    var keysSet = /* @__PURE__ */new Set();\n    _expandedRowKeys.forEach(function (x) {\n      return keysSet.add(x);\n    });\n    var copy = data2.slice();\n    copy.forEach(function (x) {\n      return depths[x[rowKey]] = 0;\n    });\n    var _loop = function _loop() {\n      var item = copy.shift();\n      array.push(item);\n      if (keysSet.has(item[rowKey]) && Array.isArray(item.children) && item.children.length > 0) {\n        copy = [].concat(_toConsumableArray(item.children), _toConsumableArray(copy));\n        item.children.forEach(function (child) {\n          return depths[child[rowKey]] = depths[item[rowKey]] + 1;\n        });\n      }\n    };\n    while (copy.length > 0) {\n      _loop();\n    }\n    depthMap.value = depths;\n    return array;\n  });\n  var data = computed(function () {\n    var data2 = props.data,\n      expandColumnKey = props.expandColumnKey;\n    return expandColumnKey ? unref(flattenedData) : data2;\n  });\n  watch(data, function (val, prev) {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1;\n      resetAfterIndex(0, true);\n    }\n  });\n  return {\n    data: data,\n    depthMap: depthMap\n  };\n};\nexport { useData };","map":{"version":3,"names":["useData","props","_ref","expandedRowKeys","lastRenderedRowIndex","resetAfterIndex","depthMap","ref","flattenedData","computed","depths","data2","data","rowKey","_expandedRowKeys","unref","length","array","keysSet","Set","forEach","x","add","copy","slice","_loop","item","shift","push","has","Array","isArray","children","concat","_toConsumableArray","child","value","expandColumnKey","watch","val","prev"],"sources":["../../../../../../../packages/components/table-v2/src/composables/use-data.ts"],"sourcesContent":["import { computed, ref, unref, watch } from 'vue'\n\nimport type { TableV2Props } from '../table'\nimport type { KeyType } from '../types'\nimport type { UseRowReturn } from './use-row'\n\ntype UseDataProps = {\n  expandedRowKeys: UseRowReturn['expandedRowKeys']\n  lastRenderedRowIndex: UseRowReturn['lastRenderedRowIndex']\n  resetAfterIndex: UseRowReturn['resetAfterIndex']\n}\n\nexport const useData = (\n  props: TableV2Props,\n  { expandedRowKeys, lastRenderedRowIndex, resetAfterIndex }: UseDataProps\n) => {\n  const depthMap = ref<Record<KeyType, number>>({})\n\n  const flattenedData = computed(() => {\n    const depths: Record<KeyType, number> = {}\n    const { data, rowKey } = props\n\n    const _expandedRowKeys = unref(expandedRowKeys)\n\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data\n\n    const array: any[] = []\n    const keysSet = new Set()\n    _expandedRowKeys.forEach((x) => keysSet.add(x))\n\n    let copy: any[] = data.slice()\n    copy.forEach((x) => (depths[x[rowKey]] = 0))\n    while (copy.length > 0) {\n      const item = copy.shift()!\n\n      array.push(item)\n      if (\n        keysSet.has(item[rowKey]) &&\n        Array.isArray(item.children) &&\n        item.children.length > 0\n      ) {\n        copy = [...item.children, ...copy]\n        item.children.forEach(\n          (child: any) => (depths[child[rowKey]] = depths[item[rowKey]] + 1)\n        )\n      }\n    }\n\n    depthMap.value = depths\n    return array\n  })\n\n  const data = computed(() => {\n    const { data, expandColumnKey } = props\n    return expandColumnKey ? unref(flattenedData) : data\n  })\n\n  watch(data, (val, prev) => {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1\n      resetAfterIndex(0, true)\n    }\n  })\n\n  return {\n    data,\n    depthMap,\n  }\n}\n\nexport type UseDataReturn = ReturnType<typeof useData>\n"],"mappings":";;;;;;;AACY,IAACA,OAAO,GAAG,SAAVA,OAAOA,CAAIC,KAAK,EAAAC,IAAA,EAAiE;EAAA,IAA7DC,eAAe,GAAAD,IAAA,CAAfC,eAAe;IAAEC,oBAAoB,GAAAF,IAAA,CAApBE,oBAAoB;IAAEC,eAAe,GAAAH,IAAA,CAAfG,eAAe;EACrF,IAAMC,QAAQ,GAAGC,GAAG,CAAC,EAAE,CAAC;EACxB,IAAMC,aAAa,GAAGC,QAAQ,CAAC,YAAM;IACnC,IAAMC,MAAM,GAAG,EAAE;IACjB,IAAcC,KAAK,GAAaV,KAAK,CAA7BW,IAAI;MAASC,MAAM,GAAKZ,KAAK,CAAhBY,MAAM;IAC3B,IAAMC,gBAAgB,GAAGC,KAAK,CAACZ,eAAe,CAAC;IAC/C,IAAI,CAACW,gBAAgB,IAAI,CAACA,gBAAgB,CAACE,MAAM,EAC/C,OAAOL,KAAK;IACd,IAAMM,KAAK,GAAG,EAAE;IAChB,IAAMC,OAAO,kBAAmB,IAAIC,GAAG,EAAE;IACzCL,gBAAgB,CAACM,OAAO,CAAC,UAACC,CAAC;MAAA,OAAKH,OAAO,CAACI,GAAG,CAACD,CAAC,CAAC;IAAA,EAAC;IAC/C,IAAIE,IAAI,GAAGZ,KAAK,CAACa,KAAK,EAAE;IACxBD,IAAI,CAACH,OAAO,CAAC,UAACC,CAAC;MAAA,OAAKX,MAAM,CAACW,CAAC,CAACR,MAAM,CAAC,CAAC,GAAG,CAAC;IAAA,EAAC;IAAC,IAAAY,KAAA,YAAAA,MAAA,EACnB;MACtB,IAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,EAAE;MACzBV,KAAK,CAACW,IAAI,CAACF,IAAI,CAAC;MAChB,IAAIR,OAAO,CAACW,GAAG,CAACH,IAAI,CAACb,MAAM,CAAC,CAAC,IAAIiB,KAAK,CAACC,OAAO,CAACL,IAAI,CAACM,QAAQ,CAAC,IAAIN,IAAI,CAACM,QAAQ,CAAChB,MAAM,GAAG,CAAC,EAAE;QACzFO,IAAI,MAAAU,MAAA,CAAAC,kBAAA,CAAOR,IAAI,CAACM,QAAQ,GAAAE,kBAAA,CAAKX,IAAI,EAAC;QAClCG,IAAI,CAACM,QAAQ,CAACZ,OAAO,CAAC,UAACe,KAAK;UAAA,OAAKzB,MAAM,CAACyB,KAAK,CAACtB,MAAM,CAAC,CAAC,GAAGH,MAAM,CAACgB,IAAI,CAACb,MAAM,CAAC,CAAC,GAAG,CAAC;QAAA,EAAC;MAC1F;IACA,CAAK;IAPD,OAAOU,IAAI,CAACP,MAAM,GAAG,CAAC;MAAAS,KAAA;IAAA;IAQtBnB,QAAQ,CAAC8B,KAAK,GAAG1B,MAAM;IACvB,OAAOO,KAAK;EAChB,CAAG,CAAC;EACF,IAAML,IAAI,GAAGH,QAAQ,CAAC,YAAM;IAC1B,IAAcE,KAAK,GAAsBV,KAAK,CAAtCW,IAAI;MAASyB,eAAe,GAAKpC,KAAK,CAAzBoC,eAAe;IACpC,OAAOA,eAAe,GAAGtB,KAAK,CAACP,aAAa,CAAC,GAAGG,KAAK;EACzD,CAAG,CAAC;EACF2B,KAAK,CAAC1B,IAAI,EAAE,UAAC2B,GAAG,EAAEC,IAAI,EAAK;IACzB,IAAID,GAAG,KAAKC,IAAI,EAAE;MAChBpC,oBAAoB,CAACgC,KAAK,GAAG,CAAC,CAAC;MAC/B/B,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC;IAC9B;EACA,CAAG,CAAC;EACF,OAAO;IACLO,IAAI,EAAJA,IAAI;IACJN,QAAQ,EAARA;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}