{"ast":null,"code":"import { defineComponent, inject, ref, unref, nextTick, computed, provide, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElCollectionItem, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY, ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY } from './tokens.mjs';\nimport { getFocusIntent, reorderArray, focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nvar _sfc_main = defineComponent({\n  components: {\n    ElRovingFocusCollectionItem: ElCollectionItem\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      \"default\": true\n    },\n    active: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: [\"mousedown\", \"focus\", \"keydown\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var _inject = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0),\n      currentTabbedId = _inject.currentTabbedId,\n      loop = _inject.loop,\n      onItemFocus = _inject.onItemFocus,\n      onItemShiftTab = _inject.onItemShiftTab;\n    var _inject2 = inject(COLLECTION_INJECTION_KEY, void 0),\n      getItems = _inject2.getItems;\n    var id = useId();\n    var rovingFocusGroupItemRef = ref(null);\n    var handleMousedown = composeEventHandlers(function (e) {\n      emit(\"mousedown\", e);\n    }, function (e) {\n      if (!props.focusable) {\n        e.preventDefault();\n      } else {\n        onItemFocus(unref(id));\n      }\n    });\n    var handleFocus = composeEventHandlers(function (e) {\n      emit(\"focus\", e);\n    }, function () {\n      onItemFocus(unref(id));\n    });\n    var handleKeydown = composeEventHandlers(function (e) {\n      emit(\"keydown\", e);\n    }, function (e) {\n      var key = e.key,\n        shiftKey = e.shiftKey,\n        target = e.target,\n        currentTarget = e.currentTarget;\n      if (key === EVENT_CODE.tab && shiftKey) {\n        onItemShiftTab();\n        return;\n      }\n      if (target !== currentTarget) return;\n      var focusIntent = getFocusIntent(e);\n      if (focusIntent) {\n        e.preventDefault();\n        var items = getItems().filter(function (item) {\n          return item.focusable;\n        });\n        var elements = items.map(function (item) {\n          return item.ref;\n        });\n        switch (focusIntent) {\n          case \"last\":\n            {\n              elements.reverse();\n              break;\n            }\n          case \"prev\":\n          case \"next\":\n            {\n              if (focusIntent === \"prev\") {\n                elements.reverse();\n              }\n              var currentIdx = elements.indexOf(currentTarget);\n              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);\n              break;\n            }\n          default:\n            {\n              break;\n            }\n        }\n        nextTick(function () {\n          focusFirst(elements);\n        });\n      }\n    });\n    var isCurrentTab = computed(function () {\n      return currentTabbedId.value === unref(id);\n    });\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef: rovingFocusGroupItemRef,\n      tabIndex: computed(function () {\n        return unref(isCurrentTab) ? 0 : -1;\n      }),\n      handleMousedown: handleMousedown,\n      handleFocus: handleFocus,\n      handleKeydown: handleKeydown\n    });\n    return {\n      id: id,\n      handleKeydown: handleKeydown,\n      handleFocus: handleFocus,\n      handleMousedown: handleMousedown\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_roving_focus_collection_item = resolveComponent(\"el-roving-focus-collection-item\");\n  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {\n    id: _ctx.id,\n    focusable: _ctx.focusable,\n    active: _ctx.active\n  }, {\n    \"default\": withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 8, [\"id\", \"focusable\", \"active\"]);\n}\nvar ElRovingFocusItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue\"]]);\nexport { ElRovingFocusItem as default };","map":{"version":3,"names":["_sfc_main","defineComponent","components","ElRovingFocusCollectionItem","ElCollectionItem","props","focusable","type","Boolean","active","emits","setup","_ref","emit","_inject","inject","ROVING_FOCUS_GROUP_INJECTION_KEY","currentTabbedId","loop","onItemFocus","onItemShiftTab","_inject2","COLLECTION_INJECTION_KEY","getItems","id","useId","rovingFocusGroupItemRef","ref","handleMousedown","composeEventHandlers","e","preventDefault","unref","handleFocus","handleKeydown","key","shiftKey","target","currentTarget","EVENT_CODE","tab","focusIntent","getFocusIntent","items","filter","item","elements","map","reverse","currentIdx","indexOf","value","reorderArray","slice","nextTick","focusFirst","isCurrentTab","computed","provide","ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY","tabIndex","createBlock","_component_el_roving_focus_collection_item","_ctx","renderSlot","$slots"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-item.vue"],"sourcesContent":["<template>\n  <el-roving-focus-collection-item\n    :id=\"id\"\n    :focusable=\"focusable\"\n    :active=\"active\"\n  >\n    <slot />\n  </el-roving-focus-collection-item>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  unref,\n} from 'vue'\nimport { useId } from '@element-plus/hooks'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  ElCollectionItem as ElRovingFocusCollectionItem,\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n} from './roving-focus-group'\nimport {\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY,\n} from './tokens'\nimport { focusFirst, getFocusIntent, reorderArray } from './utils'\n\nexport default defineComponent({\n  components: {\n    ElRovingFocusCollectionItem,\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true,\n    },\n    active: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['mousedown', 'focus', 'keydown'],\n  setup(props, { emit }) {\n    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(\n      ROVING_FOCUS_GROUP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const id = useId()\n    const rovingFocusGroupItemRef = ref<HTMLElement | null>(null)\n\n    const handleMousedown = composeEventHandlers(\n      (e: Event) => {\n        emit('mousedown', e)\n      },\n      (e) => {\n        if (!props.focusable) {\n          e.preventDefault()\n        } else {\n          onItemFocus(unref(id))\n        }\n      }\n    )\n\n    const handleFocus = composeEventHandlers(\n      (e: Event) => {\n        emit('focus', e)\n      },\n      () => {\n        onItemFocus(unref(id))\n      }\n    )\n\n    const handleKeydown = composeEventHandlers(\n      (e: Event) => {\n        emit('keydown', e)\n      },\n      (e) => {\n        const { key, shiftKey, target, currentTarget } = e as KeyboardEvent\n        if (key === EVENT_CODE.tab && shiftKey) {\n          onItemShiftTab()\n          return\n        }\n        if (target !== currentTarget) return\n        const focusIntent = getFocusIntent(e as KeyboardEvent)\n\n        if (focusIntent) {\n          e.preventDefault()\n          const items = getItems<typeof props>().filter(\n            (item) => item.focusable\n          )\n\n          let elements = items.map((item) => item.ref!)\n\n          switch (focusIntent) {\n            case 'last': {\n              elements.reverse()\n              break\n            }\n            case 'prev':\n            case 'next': {\n              if (focusIntent === 'prev') {\n                elements.reverse()\n              }\n              const currentIdx = elements.indexOf(currentTarget as HTMLElement)\n              elements = loop.value\n                ? reorderArray(elements, currentIdx + 1)\n                : elements.slice(currentIdx + 1)\n              break\n            }\n            default: {\n              break\n            }\n          }\n\n          nextTick(() => {\n            focusFirst(elements)\n          })\n        }\n      }\n    )\n\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id))\n\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => (unref(isCurrentTab) ? 0 : -1)),\n      handleMousedown,\n      handleFocus,\n      handleKeydown,\n    })\n\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}