{"ast":null,"code":"var _checkboxGroupEmits;\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useSizeProp } from '../../../hooks/use-size/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isArray } from '@vue/shared';\nvar checkboxGroupProps = buildProps({\n  modelValue: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  disabled: Boolean,\n  min: Number,\n  max: Number,\n  size: useSizeProp,\n  label: String,\n  fill: String,\n  textColor: String,\n  tag: {\n    type: String,\n    \"default\": \"div\"\n  },\n  validateEvent: {\n    type: Boolean,\n    \"default\": true\n  }\n});\nvar checkboxGroupEmits = (_checkboxGroupEmits = {}, _defineProperty(_checkboxGroupEmits, UPDATE_MODEL_EVENT, function (val) {\n  return isArray(val);\n}), _defineProperty(_checkboxGroupEmits, \"change\", function change(val) {\n  return isArray(val);\n}), _checkboxGroupEmits);\nexport { checkboxGroupEmits, checkboxGroupProps };","map":{"version":3,"names":["checkboxGroupProps","buildProps","modelValue","type","definePropType","Array","_default","disabled","Boolean","min","Number","max","size","useSizeProp","label","String","fill","textColor","tag","validateEvent","checkboxGroupEmits","_checkboxGroupEmits","_defineProperty","UPDATE_MODEL_EVENT","val","isArray","change"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.ts"],"sourcesContent":["import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useSizeProp } from '@element-plus/hooks'\nimport { buildProps, definePropType, isArray } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type checkboxGroup from './checkbox-group.vue'\nimport type { CheckboxValueType } from './checkbox'\n\nexport type CheckboxGroupValueType = Exclude<CheckboxValueType, boolean>[]\n\nexport const checkboxGroupProps = buildProps({\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: definePropType<CheckboxGroupValueType>(Array),\n    default: () => [],\n  },\n  /**\n   * @description whether the nesting checkboxes are disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description minimum number of checkbox checked\n   */\n  min: Number,\n  /**\n   * @description maximum number of checkbox checked\n   */\n  max: Number,\n  /**\n   * @description size of checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description label for screen reader\n   */\n  label: String,\n  /**\n   * @description border and background color when button is active\n   */\n  fill: String,\n  /**\n   * @description font color when button is active\n   */\n  textColor: String,\n  /**\n   * @description element tag of the checkbox group\n   */\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n} as const)\n\nexport const checkboxGroupEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxGroupValueType) => isArray(val),\n  change: (val: CheckboxValueType[]) => isArray(val),\n}\n\nexport type CheckboxGroupProps = ExtractPropTypes<typeof checkboxGroupProps>\nexport type CheckboxGroupEmits = typeof checkboxGroupEmits\nexport type CheckboxGroupInstance = InstanceType<typeof checkboxGroup>\n"],"mappings":";;;;;;;;;;;;AAGY,IAACA,kBAAkB,GAAGC,UAAU,CAAC;EAC3CC,UAAU,EAAE;IACVC,IAAI,EAAEC,cAAc,CAACC,KAAK,CAAC;IAC3B,WAAS,SAAAC,SAAA;MAAA,OAAM,EAAE;IAAA;EACrB,CAAG;EACDC,QAAQ,EAAEC,OAAO;EACjBC,GAAG,EAAEC,MAAM;EACXC,GAAG,EAAED,MAAM;EACXE,IAAI,EAAEC,WAAW;EACjBC,KAAK,EAAEC,MAAM;EACbC,IAAI,EAAED,MAAM;EACZE,SAAS,EAAEF,MAAM;EACjBG,GAAG,EAAE;IACHf,IAAI,EAAEY,MAAM;IACZ,WAAS;EACb,CAAG;EACDI,aAAa,EAAE;IACbhB,IAAI,EAAEK,OAAO;IACb,WAAS;EACb;AACA,CAAC;AACW,IAACY,kBAAkB,IAAAC,mBAAA,OAAAC,eAAA,CAAAD,mBAAA,EAC5BE,kBAAkB,EAAG,UAACC,GAAG;EAAA,OAAKC,OAAO,CAACD,GAAG,CAAC;AAAA,IAAAF,eAAA,CAAAD,mBAAA,YACnC,SAAAK,OAACF,GAAG;EAAA,OAAKC,OAAO,CAACD,GAAG,CAAC;AAAA,IAAAH,mBAAA,CAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}